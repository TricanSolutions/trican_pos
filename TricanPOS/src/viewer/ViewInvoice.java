/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.ConstantData;
import com.Logs;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import model.DB;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class ViewInvoice extends javax.swing.JDialog {

    /**
     * Creates new form viewinvoice
     */
    public ViewInvoice(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        firstLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnprev = new javax.swing.JButton();
        btnnext = new javax.swing.JButton();
        txtinvoiceid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtinvoiceno = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtcustomername = new javax.swing.JTextField();
        btnsearch = new javax.swing.JButton();
        btnclear = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtffromdate = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtftodate = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        cmbsearchmethod = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblinvoiceview = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        lblitemcount = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setText("Items");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnprev.setText("<");
        btnprev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprevActionPerformed(evt);
            }
        });

        btnnext.setText(">");
        btnnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnextActionPerformed(evt);
            }
        });

        txtinvoiceid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtinvoiceid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtinvoiceidKeyPressed(evt);
            }
        });

        jLabel2.setText("Invoice ID");

        jLabel3.setText("Invoice No");

        txtinvoiceno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtinvoicenoActionPerformed(evt);
            }
        });
        txtinvoiceno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtinvoicenoKeyPressed(evt);
            }
        });

        jLabel4.setText("Customer First Name");

        txtcustomername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcustomernameActionPerformed(evt);
            }
        });
        txtcustomername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcustomernameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcustomernameKeyReleased(evt);
            }
        });

        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        btnclear.setText("Clear");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        jLabel6.setText("From");

        try {
            txtffromdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtffromdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtffromdateKeyPressed(evt);
            }
        });

        jLabel7.setText("To");

        try {
            txtftodate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtftodate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtftodateKeyPressed(evt);
            }
        });

        jLabel10.setText("Search Method");

        cmbsearchmethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Invoice No", "Customer Name", "Customer Name+Date", "One Date", "More Date" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtcustomername, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnprev)
                        .addGap(4, 4, 4)
                        .addComponent(txtinvoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnnext)))
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(259, 259, 259)
                                .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtffromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(109, 109, 109)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7))
                                .addGap(25, 25, 25)
                                .addComponent(txtftodate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbsearchmethod, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                        .addComponent(txtinvoiceno, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbsearchmethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel3)
                            .addComponent(txtinvoiceno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtftodate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnprev)
                            .addComponent(btnnext)
                            .addComponent(txtinvoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtcustomername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(txtffromdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tblinvoiceview.setBackground(new java.awt.Color(255, 255, 204));
        tblinvoiceview.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tblinvoiceview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice No", "Date", "Customer Name", "Contact No1", "Discount Option", "Total Discount", "Grand Total", "Due Amount Rs.", "Payment Status", "Log User", "Salesman", "Branch Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblinvoiceview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblinvoiceview.getTableHeader().setReorderingAllowed(false);
        tblinvoiceview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblinvoiceviewMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblinvoiceview);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("All Pendings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblitemcount.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel8)
                    .addComponent(lblitemcount))
                .addContainerGap())
        );

        jLabel1.setBackground(new java.awt.Color(0, 0, 204));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Invoice View");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnprevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprevActionPerformed
        if (!txtinvoiceid.getText().isEmpty()) {
            int num = Integer.parseInt(txtinvoiceid.getText());
            num--;
            if (num >= 1) {
                LoadINVOICEID(String.valueOf(num));
            }
        }
        lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
    }//GEN-LAST:event_btnprevActionPerformed

    private void btnnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnextActionPerformed
        if (!txtinvoiceid.getText().isEmpty()) {
            int num = Integer.parseInt(txtinvoiceid.getText());
            num++;
            if (Integer.parseInt(GetMaxID("id", "invoice")) >= num) {
                LoadINVOICEID(String.valueOf(num));

            }
        }
        lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
    }//GEN-LAST:event_btnnextActionPerformed

    private void txtinvoiceidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtinvoiceidKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!txtinvoiceid.getText().isEmpty()) {
                int num = Integer.parseInt(txtinvoiceid.getText());
                LoadINVOICEID(String.valueOf(num));

                if (num < 1 || Integer.parseInt(GetMaxID("id", "invoice")) < num) {
                    LoadINVOICEID(GetMaxID("id", "invoice"));
                }

            } else {
                LoadINVOICEID(GetMaxID("id", "invoice"));
            }

        }

        lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
    }//GEN-LAST:event_txtinvoiceidKeyPressed

    private void txtinvoicenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtinvoicenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtinvoicenoActionPerformed

    private void txtinvoicenoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtinvoicenoKeyPressed
        if (evt.getKeyCode() == 10) {
            txtcustomername.grabFocus();
        }
    }//GEN-LAST:event_txtinvoicenoKeyPressed

    private void txtcustomernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcustomernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcustomernameActionPerformed

    private void txtcustomernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcustomernameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtffromdate.grabFocus();
        }
    }//GEN-LAST:event_txtcustomernameKeyPressed

    private void txtcustomernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcustomernameKeyReleased

    }//GEN-LAST:event_txtcustomernameKeyReleased

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        if (cmbsearchmethod.getSelectedIndex() != 0) {

            if (cmbsearchmethod.getSelectedIndex() == 1) { //invoice no
                SearchforINVOICEno();
            } else if (cmbsearchmethod.getSelectedIndex() == 2) { // supplier
                SearchforCustomer();
            } else if (cmbsearchmethod.getSelectedIndex() == 3) {// suplier dates
                SearchforCustomerwithDaterange();
            } else if (cmbsearchmethod.getSelectedIndex() == 4) {// one date
                Searchforfromdate();
            } else if (cmbsearchmethod.getSelectedIndex() == 5) {// more date
                SearchforDaterange();
            }

        } else {
            clearAll();
        }
        new Logs().createLog("View Invoice Search", ConstantData.logUserId);
    }//GEN-LAST:event_btnsearchActionPerformed

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        clearAll();

    }//GEN-LAST:event_btnclearActionPerformed

    private void txtffromdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtffromdateKeyPressed
        if (evt.getKeyCode() == 10) {
            txtftodate.grabFocus();
        }
    }//GEN-LAST:event_txtffromdateKeyPressed

    private void txtftodateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtftodateKeyPressed
        if (evt.getKeyCode() == 10) {
            btnsearch.grabFocus();
        }
    }//GEN-LAST:event_txtftodateKeyPressed

    private void tblinvoiceviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblinvoiceviewMouseClicked
        if (tblinvoiceview.getRowCount() != 0) {
            if (evt.getClickCount() == 2) {
                new ViewInvoiceDetails(ConstantData.home, false, tblinvoiceview.getValueAt(tblinvoiceview.getSelectedRow(), 0).toString(),this).setVisible(true);
                //            new viewinvoicedetails(ConstantData.home, true).setVisible(true);
            }
        }
    }//GEN-LAST:event_tblinvoiceviewMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearAllPendings();

        ListAllPendings();
        new Logs().createLog("View Invoice All Pending", ConstantData.logUserId);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewInvoice dialog = new ViewInvoice(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btnnext;
    private javax.swing.JButton btnprev;
    private javax.swing.JButton btnsearch;
    private javax.swing.JComboBox cmbsearchmethod;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JTable tblinvoiceview;
    private javax.swing.JTextField txtcustomername;
    private javax.swing.JFormattedTextField txtffromdate;
    private javax.swing.JFormattedTextField txtftodate;
    private javax.swing.JTextField txtinvoiceid;
    private javax.swing.JTextField txtinvoiceno;
    // End of variables declaration//GEN-END:variables
 private void firstLoad() {

        LoadCustomertoTxt();
        LoadINVOICEID(GetMaxID("id", "invoice"));
        cmbsearchmethod.grabFocus();
    }

    private void LoadINVOICEID(String invoiceid) {
        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "invoice.id = '" + invoiceid.trim() + "'\n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            if (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText(invoiceid);
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String GetMaxID(String column, String table) { // return next new id
        String id = "1";
        try {
            ResultSet rs = model.DB.getData("select max(" + column.trim() + ") from " + table.trim());

            if (rs.next()) {

                if (rs.getString(1) != null) {

                    id = rs.getString(1);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return id;
    }

    private void LoadCustomertoTxt() {

        List<String> li = new ArrayList<String>();

        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "buz_man.fname\n"
                    + ""
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Customer' \n"
                    + "");
            while (rs.next()) {
                li.add(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        AutoCompleteDecorator.decorate(txtcustomername, li, true);
    }

    public void clearAll() {
        txtinvoiceno.setText("");
//        txtsupid.setText("");
        txtcustomername.setText("");
//        txtserialno.setText("");
        txtffromdate.setValue("");
        txtftodate.setValue("");
        cmbsearchmethod.setSelectedIndex(0);
        LoadINVOICEID(GetMaxID("id", "invoice"));
    }

    private void SearchforINVOICEno() {
        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "invoice.id = '" + txtinvoiceno.getText().trim() + "'\n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            if (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
//            txtsupid.setText("");
            txtcustomername.setText("");
//            txtfSupContact.setValue("");
            txtffromdate.setValue("");
            txtftodate.setValue("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SearchforCustomer() {
        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "buz_man.fname = '" + txtcustomername.getText().trim() + "'\n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            while (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
            txtinvoiceno.setText("");
            txtffromdate.setValue("");
            txtftodate.setValue("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void SearchforCustomerwithDaterange() {
        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "buz_man.fname = '" + txtcustomername.getText().trim() + "'\n"
                    + "and invoice.date between '" + txtffromdate.getText().concat(" 00:00:00.0") + "' and  '" + txtftodate.getText().concat(" 00:00:00.0") + "' \n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            while (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
            txtinvoiceno.setText("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SearchforCustomerwithfromdateonly() {
        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "buz_man.fname = '" + txtcustomername.getText().trim() + "'\n"
                    + "and invoice.date like '" + txtffromdate.getText() + "%' \n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            while (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
            txtinvoiceno.setText("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SearchforDaterange() {
        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "\n"
                    + " invoice.date between '" + txtffromdate.getText().concat(" 00:00:00.0") + "' and  '" + txtftodate.getText().concat(" 00:00:00.0") + "' \n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            while (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
            txtinvoiceno.setText("");
//            txtsupid.setText("");
            txtcustomername.setText("");
//            txtfSupContact.setValue("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Searchforfromdate() {

        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + " invoice.date like '" + txtffromdate.getText() + "%' \n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            while (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
            txtinvoiceno.setText("");
//            txtsupid.setText("");
            txtcustomername.setText("");
//            txtfSupContact.setValue("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ListAllPendings() {

        DefaultTableModel tbl = (DefaultTableModel) tblinvoiceview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "invoice.id,\n"
                    + "invoice.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "invoice.discount_opt,\n"
                    + "invoice.discount,\n"
                    + "invoice.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "invoice.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "invoice ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "invoice.buz_man_id = buz_man.id AND\n"
                    + "invoice.`status` = '1' AND\n"
                    + "invoice.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'INVOICE' AND\n"
                    + "invoice.user_id = `user`.id AND\n"
                    + "invoice.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "payment_reg.status='" + ConstantData.Status_PENDING + "'  \n"
                    + "ORDER BY\n"
                    + "invoice.id DESC");

            while (rs.next()) {

                String invoiceno = rs.getString(1);
                String date = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String supcontact = rs.getString(5);
                String discoption = rs.getString(6);

                String discount = rs.getString(7);
                String total = rs.getString(8);
                String dueamount = rs.getString(9);

                String status = "";
                if (rs.getString(10).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(10).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(11) + " " + rs.getString(12);
                String storekeeper = getUsername(rs.getString(13));
                String brnch = rs.getString(14);

                Object arr[] = {invoiceno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtinvoiceid.setText("");
            txtinvoiceno.setText("");
//            txtsupid.setText("");
            txtcustomername.setText("");
//            txtfSupContact.setValue("");
            txtffromdate.setValue("");
            txtftodate.setValue("");
            lblitemcount.setText(String.valueOf(tblinvoiceview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private String getUsername(String id) {
        String name = "";
        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "`user`.fname,\n"
                    + "`user`.lname\n"
                    + "FROM\n"
                    + "`user`\n"
                    + "WHERE\n"
                    + "`user`.id = '" + id.trim() + "'");
            if (rs.next()) {
                name = rs.getString(1) + " " + rs.getString(2);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return name;
    }

    private void clearAllPendings() {
        txtinvoiceno.setText("");
        txtcustomername.setText("");
        txtinvoiceid.setText("");
        txtffromdate.setValue("");
        txtftodate.setValue("");
        cmbsearchmethod.setSelectedIndex(0);

    }

}
