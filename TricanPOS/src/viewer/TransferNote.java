/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.AllCalculations;
import com.ConstantData;
import com.DBQueryEngine;
import com.DateUp;
import com.Empty;
import com.Format;
import com.Logs;
import com.Messages;
import com.Validation;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.DB;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class TransferNote extends javax.swing.JDialog {

    /**
     * Creates new form TransferNote
     */
    public TransferNote(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        FirstLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbldate = new javax.swing.JLabel();
        txtfdate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbissue = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        cmbcollect = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblitemcount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtgrandamount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lblpieces = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lbldis = new javax.swing.JLabel();
        lblamount = new javax.swing.JLabel();
        txtamount = new javax.swing.JTextField();
        txtdiscount = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtitemid = new javax.swing.JTextField();
        lblitemname = new javax.swing.JLabel();
        txtitemname = new javax.swing.JTextField();
        lblbarcode = new javax.swing.JLabel();
        lblcostprice = new javax.swing.JLabel();
        txtcostprice = new javax.swing.JTextField();
        lblsellprice = new javax.swing.JLabel();
        txtsellprice = new javax.swing.JTextField();
        lblqty = new javax.swing.JLabel();
        txtqty = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cmbdiscount = new javax.swing.JComboBox();
        lbldiscount = new javax.swing.JLabel();
        lblavailabaleqty = new javax.swing.JLabel();
        btnitemclear = new javax.swing.JButton();
        btnadd = new javax.swing.JButton();
        txtbarcode = new javax.swing.JTextField();
        lblserialno = new javax.swing.JLabel();
        txtserialno = new javax.swing.JTextField();
        btnitemserch = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtwarranty = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtserialtype = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblinvo = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnclear = new javax.swing.JButton();
        btntranse = new javax.swing.JButton();
        lblnote = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtareanote = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        cmbbranch = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(0, 204, 204));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Transfer Note");
        jLabel1.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbldate.setText("Date");

        try {
            txtfdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtfdateKeyPressed(evt);
            }
        });

        jLabel4.setText("Issue By");

        cmbissue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbissueKeyPressed(evt);
            }
        });

        jLabel11.setText("Collect By");

        cmbcollect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbcollectKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lbldate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtfdate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbissue, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(cmbcollect, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbldate)
                        .addComponent(txtfdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(cmbissue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(cmbcollect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Item Count");

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblitemcount.setText("0");

        jLabel7.setText("Net Amount Rs.");

        txtgrandamount.setEditable(false);
        txtgrandamount.setBackground(new java.awt.Color(255, 255, 204));
        txtgrandamount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtgrandamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtgrandamount.setText("0.0");
        txtgrandamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgrandamountActionPerformed(evt);
            }
        });

        jLabel6.setText("Pieces Count");

        lblpieces.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblpieces.setText("0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblpieces, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(txtgrandamount, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblitemcount)
                    .addComponent(jLabel7)
                    .addComponent(txtgrandamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(lblpieces))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Item"));

        lbldis.setText("Discount");

        lblamount.setText("Amount Rs.");

        txtamount.setEditable(false);
        txtamount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtamount.setText("0.0");

        txtdiscount.setEditable(false);
        txtdiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtdiscount.setText("0.0");
        txtdiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtdiscountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtdiscountKeyReleased(evt);
            }
        });

        jLabel10.setText("Item ID");

        txtitemid.setEditable(false);

        lblitemname.setText("Item Name");

        txtitemname.setEditable(false);
        txtitemname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtitemnameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtitemnameKeyReleased(evt);
            }
        });

        lblbarcode.setText("Barcode No");

        lblcostprice.setText("Cost Price");

        txtcostprice.setEditable(false);
        txtcostprice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtcostprice.setText("0.0");
        txtcostprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcostpriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcostpriceKeyReleased(evt);
            }
        });

        lblsellprice.setText("Sell Price");

        txtsellprice.setEditable(false);
        txtsellprice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtsellprice.setText("0.0");
        txtsellprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtsellpriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsellpriceKeyReleased(evt);
            }
        });

        lblqty.setText("Qty");

        txtqty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtqty.setText("0.0");
        txtqty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtqtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtqtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtqtyKeyTyped(evt);
            }
        });

        jLabel19.setText("Discount Opt");

        cmbdiscount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Price", "%" }));
        cmbdiscount.setEnabled(false);
        cmbdiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbdiscountActionPerformed(evt);
            }
        });
        cmbdiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbdiscountKeyPressed(evt);
            }
        });

        lbldiscount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbldiscount.setText("0.0");

        lblavailabaleqty.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblavailabaleqty.setForeground(new java.awt.Color(0, 0, 204));
        lblavailabaleqty.setText("0");

        btnitemclear.setText("Reset");
        btnitemclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnitemclearActionPerformed(evt);
            }
        });

        btnadd.setText("Add");
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });

        txtbarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbarcodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbarcodeKeyReleased(evt);
            }
        });

        lblserialno.setText("Serial No");

        txtserialno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtserialnoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtserialnoKeyReleased(evt);
            }
        });

        btnitemserch.setText("+");
        btnitemserch.setToolTipText("Item Search");
        btnitemserch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnitemserchActionPerformed(evt);
            }
        });

        jLabel8.setText("Warranty");

        txtwarranty.setEditable(false);
        txtwarranty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtwarranty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtwarrantyKeyReleased(evt);
            }
        });

        jLabel5.setText("Serial Type");

        txtserialtype.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(lbldis))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtdiscount)
                                    .addComponent(cmbdiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                            .addComponent(lblcostprice)
                                            .addGap(25, 25, 25))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(lblsellprice)
                                            .addGap(31, 31, 31)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblqty)
                                        .addGap(55, 55, 55)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtqty)
                                    .addComponent(txtsellprice)
                                    .addComponent(txtcostprice, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbldiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblavailabaleqty, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 18, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblitemname)
                            .addComponent(lblbarcode)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtitemname, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(txtbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtserialno)
                            .addComponent(txtitemid, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnitemserch, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblamount)
                                .addGap(18, 18, 18)
                                .addComponent(txtamount, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblserialno)
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(txtwarranty, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(20, 20, 20)
                                .addComponent(txtserialtype, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnadd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnitemclear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtitemid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblitemname)
                    .addComponent(txtitemname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnitemserch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtserialtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtserialno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblserialno))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtwarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblcostprice)
                    .addComponent(txtcostprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblsellprice)
                    .addComponent(txtsellprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblqty)
                            .addComponent(txtqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbdiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtdiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbldis)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblavailabaleqty)
                        .addGap(62, 62, 62)
                        .addComponent(lbldiscount)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblamount)
                    .addComponent(txtamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnitemclear)
                    .addComponent(btnadd))
                .addGap(21, 21, 21))
        );

        tblinvo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Barcode No", "Serial Type", "Serial No", "Warranty", "Cost Price", "Sell Price", "Qty", "Discount Opt", "Discount", "Amount Rs."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblinvo.getTableHeader().setReorderingAllowed(false);
        tblinvo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblinvoMouseClicked(evt);
            }
        });
        tblinvo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblinvoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblinvoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblinvo);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnclear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnclear.setText("Reset");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        btntranse.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btntranse.setText("Transfer Now");
        btntranse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntranseActionPerformed(evt);
            }
        });

        lblnote.setText("Note");

        txtareanote.setColumns(20);
        txtareanote.setRows(5);
        txtareanote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtareanoteKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtareanote);

        jLabel2.setText("(F1)>>");

        cmbbranch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbbranchKeyPressed(evt);
            }
        });

        jLabel9.setText("Branch");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblnote)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(cmbbranch, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(btntranse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(lblnote)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btntranse, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(cmbbranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtfdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfdateKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbissue.grabFocus();
        }
    }//GEN-LAST:event_txtfdateKeyPressed

    private void cmbissueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbissueKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbcollect.grabFocus();
        }
    }//GEN-LAST:event_cmbissueKeyPressed

    private void txtgrandamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgrandamountActionPerformed

    }//GEN-LAST:event_txtgrandamountActionPerformed

    private void txtdiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdiscountKeyPressed
        if (evt.getKeyCode() == 10) {
            btnadd.grabFocus();

        }
    }//GEN-LAST:event_txtdiscountKeyPressed

    private void txtdiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdiscountKeyReleased
        Validation.validatedouble(txtdiscount);

        if (txtsellprice.getText().isEmpty() || Double.parseDouble(txtsellprice.getText()) == 0) {
            txtsellprice.grabFocus();
            txtsellprice.selectAll();
        } else if (txtqty.getText().isEmpty() || Double.parseDouble(txtqty.getText()) == 0) {
            txtqty.grabFocus();
            txtqty.selectAll();
        } else if (txtdiscount.getText().isEmpty()) {
            txtamount.setText("0.0");
            lbldiscount.setText("0.0");
            txtdiscount.setText("0.0");
            txtdiscount.selectAll();
            Calculations();
        } else {
            Calculations();
        }
    }//GEN-LAST:event_txtdiscountKeyReleased

    private void txtitemnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnameKeyPressed

    }//GEN-LAST:event_txtitemnameKeyPressed

    private void txtitemnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnameKeyReleased
        if (!txtitemname.getText().isEmpty()) {
            LoadItemid();
        } else {

            ClearItemdetails();
        }
    }//GEN-LAST:event_txtitemnameKeyReleased

    private void txtcostpriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcostpriceKeyPressed
        if (evt.getKeyCode() == 10) {
            txtsellprice.grabFocus();
            txtsellprice.selectAll();
        }
    }//GEN-LAST:event_txtcostpriceKeyPressed

    private void txtcostpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcostpriceKeyReleased
        Validation.validatedouble(txtcostprice);
    }//GEN-LAST:event_txtcostpriceKeyReleased

    private void txtsellpriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsellpriceKeyPressed
        if (evt.getKeyCode() == 10) {
            txtqty.grabFocus();
            txtqty.selectAll();
        }
    }//GEN-LAST:event_txtsellpriceKeyPressed

    private void txtsellpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsellpriceKeyReleased
        Validation.validatedouble(txtsellprice);
    }//GEN-LAST:event_txtsellpriceKeyReleased

    private void txtqtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtqtyKeyPressed
        if (evt.getKeyCode() == 10) {
//            //cmbdiscount.grabFocus();
//            txtdiscount.grabFocus();
//            txtdiscount.selectAll();

            btnadd.grabFocus();

        }
    }//GEN-LAST:event_txtqtyKeyPressed

    private void txtqtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtqtyKeyReleased
        Validation.validatedouble(txtqty);

        if (!lblavailabaleqty.getText().isEmpty() && !txtqty.getText().isEmpty() && !txtitemid.getText().isEmpty()) {
            double availableqty = Double.valueOf(lblavailabaleqty.getText());
            double qty = Double.valueOf(txtqty.getText());
            if (availableqty < qty) {
                Messages.warningjoption("Out of Qty ! ");
                txtqty.setText(lblavailabaleqty.getText());
                txtqty.selectAll();

            }

            if (txtsellprice.getText().isEmpty() || Double.parseDouble(txtsellprice.getText()) == 0) {
                txtsellprice.grabFocus();
                txtsellprice.selectAll();
            } else if (txtqty.getText().isEmpty() || Double.parseDouble(txtqty.getText()) == 0) {
                txtqty.grabFocus();
                txtqty.selectAll();
            } else if (txtdiscount.getText().isEmpty()) {
                txtamount.setText("0.0");
                lbldiscount.setText("0.0");
                txtdiscount.setText("0.0");
                txtdiscount.selectAll();
                Calculations();
            } else {
                Calculations();
            }

        } else {
            txtamount.setText("0.0");
            lbldiscount.setText("0.0");
            txtdiscount.setText("0.0");
            txtdiscount.selectAll();

        }
    }//GEN-LAST:event_txtqtyKeyReleased

    private void txtqtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtqtyKeyTyped

    }//GEN-LAST:event_txtqtyKeyTyped

    private void cmbdiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbdiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbdiscountActionPerformed

    private void cmbdiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbdiscountKeyPressed
        if (evt.getKeyCode() == 10) {
            txtdiscount.grabFocus();
            txtdiscount.selectAll();

        }
    }//GEN-LAST:event_cmbdiscountKeyPressed

    private void btnitemclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnitemclearActionPerformed
        ClearItemdetails();
    }//GEN-LAST:event_btnitemclearActionPerformed

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
        if (Empty.TxtFieldEmpty(txtitemid, Empty.Text + lblitemname.getText())) {

        } else if (Empty.TxtFieldEmpty(txtbarcode, Empty.Text + lblbarcode.getText())) {
        } else if (Empty.TxtFieldEmpty(txtserialno, Empty.Text + lblserialno.getText())) {
        } else if (Empty.TxtFieldEmpty(txtcostprice, Empty.Text + lblcostprice.getText())) {
        } else if (Empty.TxtFieldEmpty(txtsellprice, Empty.Text + lblsellprice.getText())) {
        } else if (Empty.TxtFieldEmpty(txtqty, Empty.Text + lblqty.getText())) {
        } else if (Empty.TxtFieldEmpty(txtdiscount, Empty.Text + lblitemname.getText())) {
        } else if (Empty.TxtFieldEmpty(txtamount, Empty.Text + lblamount.getText())) {
        } else if (checkFeildValues()) {

            if (isAlreadyExistthisItem()) {
                addItemDetailstoTable();
                TableItemAmountandItemCount();
                CalculatePieces();
            } else {
                ClearItemdetails();
                txtitemname.grabFocus();
            }

        }
    }//GEN-LAST:event_btnaddActionPerformed

    private void txtbarcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbarcodeKeyPressed
        if (evt.getKeyCode() == 10) {

            if (!txtbarcode.getText().isEmpty()) {
                setItembyBarcodeNo();

            }

        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {
//            cmbfinaldiscount.grabFocus();
        }
    }//GEN-LAST:event_txtbarcodeKeyPressed

    private void txtbarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbarcodeKeyReleased
        Validation.validatedouble(txtbarcode);
        if (txtbarcode.getText().isEmpty()) {
            ClearItemdetails();
        }
    }//GEN-LAST:event_txtbarcodeKeyReleased

    private void txtserialnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtserialnoKeyPressed
        if (evt.getKeyCode() == 10) {

            if (!txtserialno.getText().isEmpty()) {

                setItembySerailNo();

            }

        }
    }//GEN-LAST:event_txtserialnoKeyPressed

    private void txtserialnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtserialnoKeyReleased
        if (txtserialno.getText().isEmpty()) {
            ClearItemdetails();
        }
    }//GEN-LAST:event_txtserialnoKeyReleased

    private void btnitemserchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnitemserchActionPerformed
        ClearItemdetails();
        new ItemSearch(ConstantData.home, true, this).setVisible(true);
    }//GEN-LAST:event_btnitemserchActionPerformed

    private void txtwarrantyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtwarrantyKeyReleased
        Validation.validatedouble(txtwarranty);
    }//GEN-LAST:event_txtwarrantyKeyReleased

    private void tblinvoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblinvoMouseClicked
        if (evt.getClickCount() == 2) {
            if (tblinvo.getRowCount() != 0) {

                UpdateItem();

            }
        }
    }//GEN-LAST:event_tblinvoMouseClicked

    private void tblinvoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblinvoKeyPressed
        if (evt.getKeyCode() == 127) {
            if (tblinvo.getRowCount() != 0) {
                int part = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this Item ? ", "Message", 0, 0);

                if (part == JOptionPane.YES_OPTION) {

                    deleteItem();

                }

            }
        }
    }//GEN-LAST:event_tblinvoKeyPressed

    private void tblinvoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblinvoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblinvoKeyReleased

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        clearAll();
    }//GEN-LAST:event_btnclearActionPerformed

    private void btntranseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntranseActionPerformed
//        if (tblinvo.getRowCount() != 0 && Double.parseDouble(txtgrandfinalamount.getText()) > 0 && Empty.DateFormatedFeild(txtfdate)
//                && cmbissue.getSelectedIndex() != 0) {
        if (tblinvo.getRowCount() != 0 && Empty.DateFormatedFeild(txtfdate)
                && cmbissue.getSelectedIndex() != 0) {

//            if (invoicepay == null) {
//                invoicepay = new InvoicePayment(ConstantData.home, this, false, txtgrandfinalamount.getText().trim());
//                invoicepay.setVisible(true);
//            } else {
//                invoicepay.lblgrandamount.setText(Format.decimal3.format(Double.parseDouble(txtgrandfinalamount.getText())));
//                invoicepay.AllFinalCalculations();
//                invoicepay.setVisible(true);
//            }
        } else {
            Messages.warningjoption("Please Check Date , Salesman Fields & data are Filled Correctly ! ");
        }

    }//GEN-LAST:event_btntranseActionPerformed

    private void txtareanoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtareanoteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            btntranse.grabFocus();
        }
    }//GEN-LAST:event_txtareanoteKeyPressed

    private void cmbcollectKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbcollectKeyPressed
        if (evt.getKeyCode() == 10) {
            txtbarcode.grabFocus();
        }
    }//GEN-LAST:event_cmbcollectKeyPressed

    private void cmbbranchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbbranchKeyPressed
        if (evt.getKeyCode() == 10) {
            btntranse.grabFocus();
        }
    }//GEN-LAST:event_cmbbranchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransferNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransferNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransferNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransferNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TransferNote dialog = new TransferNote(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btnitemclear;
    private javax.swing.JButton btnitemserch;
    private javax.swing.JButton btntranse;
    private javax.swing.JComboBox<String> cmbbranch;
    private javax.swing.JComboBox<String> cmbcollect;
    private javax.swing.JComboBox cmbdiscount;
    public javax.swing.JComboBox<String> cmbissue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblamount;
    private javax.swing.JLabel lblavailabaleqty;
    private javax.swing.JLabel lblbarcode;
    private javax.swing.JLabel lblcostprice;
    private javax.swing.JLabel lbldate;
    private javax.swing.JLabel lbldis;
    private javax.swing.JLabel lbldiscount;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JLabel lblitemname;
    private javax.swing.JLabel lblnote;
    private javax.swing.JLabel lblpieces;
    private javax.swing.JLabel lblqty;
    private javax.swing.JLabel lblsellprice;
    private javax.swing.JLabel lblserialno;
    private javax.swing.JTable tblinvo;
    private javax.swing.JTextField txtamount;
    private javax.swing.JTextArea txtareanote;
    public javax.swing.JTextField txtbarcode;
    private javax.swing.JTextField txtcostprice;
    private javax.swing.JTextField txtdiscount;
    private javax.swing.JFormattedTextField txtfdate;
    private javax.swing.JTextField txtgrandamount;
    public javax.swing.JTextField txtitemid;
    public javax.swing.JTextField txtitemname;
    private javax.swing.JTextField txtqty;
    private javax.swing.JTextField txtsellprice;
    public javax.swing.JTextField txtserialno;
    private javax.swing.JTextField txtserialtype;
    private javax.swing.JTextField txtwarranty;
    // End of variables declaration//GEN-END:variables
private void FirstLoad() {
        txtfdate.setValue(new DateUp().getCurrentDate());
        txtfdate.grabFocus();
        loadIssueCombo();
        loadCollectCombo();
        loadBranches();
        cmbissue.grabFocus();
    }

    private void loadBranches() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbbranch.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "branch.id,\n"
                    + "branch.`name`,\n"
                    + "branch.`status`\n"
                    + "FROM\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "branch.`status` = '1' and branch.id<> '" + ConstantData.branchId + "'");
            while (rs.next()) {

                dcbm.addElement(rs.getString(2));
            }

//            if (dcbm.getSize() > 1 && !ConstantData.branchName.isEmpty()) {
//                dcbm.setSelectedItem(ConstantData.branchName);
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadIssueCombo() {

        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbissue.getModel();
        dcbm.removeAllElements();

        try {

            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "`user`.id,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname\n"
                    + "FROM\n"
                    + "`user` ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "\n"
                    + "`user`.user_type_id = user_type.id AND `user`.status='" + ConstantData.Status_ACTIVE + "' and user.id<>1  \n"
                    + " "); //usertype id
            while (rs.next()) {

                dcbm.addElement(rs.getString(1) + "- " + rs.getString(2) + " " + rs.getString(3));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadCollectCombo() {

        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbcollect.getModel();
        dcbm.removeAllElements();

        try {

            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "`user`.id,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname\n"
                    + "FROM\n"
                    + "`user` ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "\n"
                    + "`user`.user_type_id = user_type.id AND `user`.status='" + ConstantData.Status_ACTIVE + "' and user.id<>1  \n"
                    + " "); //usertype id
            while (rs.next()) {

                dcbm.addElement(rs.getString(1) + "- " + rs.getString(2) + " " + rs.getString(3));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

//    private void SelectCustomerfromName() {
//
//        try {
//            String fname = txtcustomername.getText().split(" ")[0];
//            String lname = txtcustomername.getText().split(" ")[1];
//
//            ResultSet rs = DB.getData("SELECT\n"
//                    + "buz_man.id,\n"
//                    + "buz_man.contact_1\n"
//                    + "FROM\n"
//                    + "buz_man ,\n"
//                    + "user_type\n"
//                    + "WHERE\n"
//                    + "buz_man.user_type_id = user_type.id AND\n"
//                    + "user_type.type = 'Customer' AND\n"
//                    + "buz_man.`status` = '1' AND\n"
//                    + "buz_man.fname = '" + fname + "' AND\n"
//                    + "buz_man.lname = '" + lname + "'");
//            if (rs.next()) {
//
//                txtcustomerid.setText(rs.getString(1));
//                txtfCustomerContact.setText(rs.getString(2));
//
//                if (invoicepay != null) {
//                    invoicepay.maincustomerid = rs.getString(1);
//                    invoicepay.LoadBuzman();
//                }
//
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//    }
//    private void LoadItemstoTxt() {
//        List<String> li = new ArrayList<String>();
//
//        try {
//
//            ResultSet rs = DB.getData("SELECT\n"
//                    + "item.`name`\n"
//                    + "FROM\n"
//                    + "item\n"
//                    + "WHERE\n"
//                    + "item.`status` = '1'");
//            while (rs.next()) {
//                li.add(rs.getString(1));
//
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        AutoCompleteDecorator.decorate(txtitemname, li, true);
//    }
    private void LoadItemid() {
        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + ""
                    + "item.id\n"
                    + "FROM\n"
                    + "item\n"
                    + "WHERE\n"
                    + "item.`status` = '1' AND\n"
                    + "item.`name` = '" + txtitemname.getText() + "'");
            if (rs.next()) {

                txtitemid.setText(rs.getString(1));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ClearItemdetails() {
        txtitemid.setText("");
        txtitemname.setText("");

        txtbarcode.setText("");
        txtserialtype.setText("");
        txtserialno.setText("");
        txtwarranty.setText("0");
        txtserialno.setEditable(true);
        cmbdiscount.setSelectedIndex(0);
        txtcostprice.setText("0.0");
        txtsellprice.setText("0.0");
        txtqty.setText("0.0");
        txtdiscount.setText("0.0");
        txtamount.setText("0.0");
        lblavailabaleqty.setText("0");
        lbldiscount.setText("0.0");
        //  LoadItemstoTxt();
        txtbarcode.grabFocus();

    }

    private void Calculations() {

        double value = Double.parseDouble(txtdiscount.getText());
//        double lasttotal = Double.parseDouble(AllCalculations.TotalofItem(Double.parseDouble(txtsellprice.getText()), Double.parseDouble(txtqty.getText())));
        double cost = Double.parseDouble(txtcostprice.getText());
        double sell = Double.parseDouble(txtsellprice.getText());
        double qty = Double.parseDouble(txtqty.getText());

        if (cmbdiscount.getSelectedItem().toString().equals("%")) {
            if (value < 100) {
                double discountfortotal = Double.valueOf(AllCalculations.DiscountforPrecentage(sell, value));
                double rsprice = discountfortotal;
                double baln = sell - rsprice;

                if (baln < cost) { /// over cost handle
                    txtamount.setText("0.0");
                    lbldiscount.setText("0.0");
                    txtdiscount.setText("0.0");
                    txtdiscount.selectAll();
                    Calculations();
                } else {
                    lbldiscount.setText("Rs. " + Format.decimal3.format(discountfortotal));
                    txtamount.setText(Format.decimal3.format(discountfortotal * qty));
                }

            } else {
                txtamount.setText("0.0");
                lbldiscount.setText("0.0");
                txtdiscount.setText("0.0");
                txtdiscount.selectAll();
                Calculations();
            }

        } else if (cmbdiscount.getSelectedItem().toString().equals("Price")) {
            double discountforpricetotal = Double.valueOf(AllCalculations.DiscountforPrice(sell, value));
            double rsprice = Double.parseDouble(txtdiscount.getText());
            double baln = sell - rsprice;

            if (baln < cost) { /// over cost handle
                txtamount.setText("0.0");
                lbldiscount.setText("0.0");
                txtdiscount.setText("0.0");
                txtdiscount.selectAll();
                Calculations();
            } else {
                lbldiscount.setText(Format.decimal3.format((100 - discountforpricetotal)) + "%");
                txtamount.setText(String.valueOf(Format.decimal3.format(baln * qty)));
            }

        } else {
            txtamount.setText("0.0");
            lbldiscount.setText("0.0");
            txtdiscount.setText("0.0");
            txtdiscount.selectAll();
            Calculations();
        }

    }

    private boolean checkFeildValues() {

        if (Double.parseDouble(txtcostprice.getText()) == 0 || Double.parseDouble(txtcostprice.getText()) < 0) {
            Messages.warningjoption("Incorrect Data on the Field Please Check ! ");
            txtcostprice.grabFocus();
            txtcostprice.selectAll();
            return false;
        } else if (Double.parseDouble(txtsellprice.getText()) == 0 || Double.parseDouble(txtsellprice.getText()) < 0) {
            Messages.warningjoption("Incorrect Data on the Field Please Check ! ");
            txtsellprice.grabFocus();
            txtsellprice.selectAll();
            return false;
        } else if (Double.parseDouble(txtqty.getText()) == 0 || Double.parseDouble(txtqty.getText()) < 0) {
            Messages.warningjoption("Incorrect Data on the Field Please Check ! ");
            txtqty.grabFocus();
            txtqty.selectAll();
            return false;
        } else if (Double.parseDouble(txtdiscount.getText()) < 0) {
            Messages.warningjoption("Incorrect Data on the Field Please Check ! ");
            txtdiscount.grabFocus();
            txtdiscount.selectAll();
            return false;
        } else {
            return true;
        }

    }

    private void addItemDetailstoTable() {
        try {
            DefaultTableModel df = (DefaultTableModel) tblinvo.getModel();

            String itemid = txtitemid.getText();
            String itemname = txtitemname.getText();
            String barcodeno = txtbarcode.getText();
            String serialtype = txtserialtype.getText();
            String serialno = txtserialno.getText();
            String warranty = txtwarranty.getText();
            double cost = Double.parseDouble(txtcostprice.getText());
            double sell = Double.parseDouble(txtsellprice.getText());
            double qty = Double.parseDouble(txtqty.getText());
            String discounyop = cmbdiscount.getSelectedItem().toString();
            double discount = Double.parseDouble(txtdiscount.getText());
            double amount = Double.parseDouble(txtamount.getText());

            Object arr[] = {itemid, itemname, barcodeno, serialtype, serialno, warranty, cost, sell, qty, discounyop, discount, amount};
            df.addRow(arr);

            CalculatePieces();
            ClearItemdetails();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean isAlreadyExistthisItem() {

        DefaultTableModel dft = (DefaultTableModel) tblinvo.getModel();

        boolean bol = true;

        for (int i = 0; i < tblinvo.getRowCount(); i++) {

            String itemid = txtitemid.getText();
            String barcode = txtbarcode.getText();
            String serial = txtserialno.getText();

            if (itemid.equals(tblinvo.getValueAt(i, 0)) && barcode.equals(tblinvo.getValueAt(i, 2)) && serial.equals(tblinvo.getValueAt(i, 4))) {
                Messages.warningjoption("This Item Already Exist in the Table. Please Check ! ");
                bol = false;
                break;
            } else {
                bol = true;
            }

        }
        return bol;
    }

    private void TableItemAmountandItemCount() {
        if (tblinvo.getRowCount() != 0) {

//            clearFinalDiscountFeilds();
            double grandamount = 0.0;
            for (int i = 0; i < tblinvo.getRowCount(); i++) {

                grandamount += Double.parseDouble(tblinvo.getValueAt(i, 11).toString());

            }
            txtgrandamount.setText(Format.decimal3.format(grandamount));
//            txtgrandfinalamount.setText(Format.decimal3.format(grandamount));

//            if (invoicepay != null) {
//                invoicepay.lblgrandamount.setText(Format.decimal3.format(grandamount));
//                invoicepay.AllFinalCalculations();
//            }
        } else {
            clreaGrandAmountFeilds();
        }
        lblitemcount.setText(String.valueOf(tblinvo.getRowCount()));
    }

    private void deleteItem() {

        try {
            DefaultTableModel df = (DefaultTableModel) tblinvo.getModel();
            df.removeRow(tblinvo.getSelectedRow());
            TableItemAmountandItemCount();
            if (tblinvo.getRowCount() == 0) {
//                invoicepay = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void UpdateItem() {
        try {
            txtitemid.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 0).toString());
            txtitemname.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 1).toString());
            txtbarcode.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 2).toString());
            setItembyBarcodeNo();
            txtserialtype.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 3).toString());
            txtserialno.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 4).toString());
            txtwarranty.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 5).toString());
            txtcostprice.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 6).toString());
            txtsellprice.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 7).toString());
            txtqty.setText("0.0");
            cmbdiscount.setSelectedItem(tblinvo.getValueAt(tblinvo.getSelectedRow(), 9).toString());
            txtdiscount.setText(tblinvo.getValueAt(tblinvo.getSelectedRow(), 10).toString());
            Calculations();

            deleteItem();
            CalculatePieces();
            txtqty.grabFocus();
            txtqty.selectAll();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void clreaGrandAmountFeilds() {

//        cmbfinaldiscount.setSelectedIndex(0);
//        txtfinaldiscount.setText("0.0");
//        lblfinaldiscount.setText("0.0");
//        txtgrandamount.setText("0.0");
//        txtgrandfinalamount.setText("0.0");
    }

//    private void Calculations_Finals() {
//        try {
//            double cost = Double.parseDouble(txtgrandamount.getText());
////            double value = Double.parseDouble(txtfinaldiscount.getText());
//
//            if (cmbfinaldiscount.getSelectedItem().toString().equals("%")) {
//                if (value < 100) {
//
//                    double lastdiscount = Double.parseDouble(AllCalculations.DiscountforPrecentage(cost, value));
//
//                    lblfinaldiscount.setText("Rs. " + Format.decimal3.format(lastdiscount));
//                    txtgrandfinalamount.setText(Format.decimal3.format(lastdiscount));
//
//                } else {
//                    txtgrandfinalamount.setText("0.0");
//                    lblfinaldiscount.setText("0.0");
//                    txtfinaldiscount.setText("0.0");
//                    txtfinaldiscount.selectAll();
//                    Calculations_Finals();
//                }
//
//            } else if (value <= cost) {
//
//                double lastdiscount = Double.parseDouble(AllCalculations.DiscountforPrice(cost, value));
//
//                lblfinaldiscount.setText(Format.decimal3.format((100 - lastdiscount)) + "%");
//                txtgrandfinalamount.setText(Format.decimal3.format((cost - value)));
//
//            } else {
//                txtgrandfinalamount.setText("0.0");
//                lblfinaldiscount.setText("0.0");
//                txtfinaldiscount.setText("0.0");
//                txtfinaldiscount.selectAll();
//                Calculations_Finals();
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//    }
//    private void clearFinalDiscountFeilds() {
//
//        try {
//
//            cmbfinaldiscount.setSelectedIndex(0);
//            txtfinaldiscount.setText("0.0");
//            lblfinaldiscount.setText("0.0");
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//    }
//    private boolean isnotINVOICEnoAlreadyExist() {
//        boolean bol = true;
//        try {
//            ResultSet rs = DB.getData("SELECT\n"
//                    + "Invoice.invoiceno\n"
//                    + "FROM\n"
//                    + "Invoice\n"
//                    + "WHERE\n"
//                    + "Invoice.invoiceno = '" + txtinvoiceno.getText() + "'");
//            if (rs.next()) {
//                bol = false;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return bol;
//    }
    private boolean checkBatchnoAvailability() {
        boolean bol = true;
        try {
            if (tblinvo.getRowCount() != 0) {
                for (int i = 0; i < tblinvo.getRowCount(); i++) {
                    String itmid = tblinvo.getValueAt(i, 0).toString();
                    String barcode = tblinvo.getValueAt(i, 2).toString();
                    String itemname = tblinvo.getValueAt(i, 1).toString();

                    if (checkItemStatusByIDandBatch(itmid, barcode)) {// true if batch status not = 1
                        Messages.errorjoption("Sorry this Item- " + itemname + " Batch- " + barcode + "  Currently Deactivated , Plaese Check ! ");
                        tblinvo.setRowSelectionInterval(i, i);
                        bol = false;
                        break;
                    } else {
                        bol = true;
                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return bol;

    }

    private boolean checkItemStatusByIDandBatch(String itemid, String barcode) { // disable batch id 
        boolean bol = false;
        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "batch.id\n"
                    + "FROM\n"
                    + "batch\n"
                    + "WHERE\n"
                    + "batch.item_id = '" + itemid + "' AND\n"
                    + "batch.barcode = '" + barcode + "' AND\n"
                    + "batch.`status` <> '1'");
            if (rs.next()) {
                bol = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bol;

    }

    protected synchronized void saveAllINVOICEDetails() {
        Connection conn = null;

        try {
//        //    if (isnotINVOICEnoAlreadyExist()) {

            if (checkBatchnoAvailability()) {
                if (checkItemQtyAvailabale()) {

                    SaveINVOICE(conn);// save Invoice
                    new Logs().createLog("Invoice Save", cmbissue.getSelectedItem().toString().split("-")[0]);
                }
            }
//            } else {
//                Messages.warningjoption("This INVOICE Number already exist ! Please try another ! ");
//            }
        } catch (Exception e) {
            Messages.warningjoption("OOoppzz ,Somthing wrong this Saving Process,Plaese Try again !");
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }

    private void SaveINVOICE(Connection conn) throws Exception {

        conn = model.DB2.getconn();

        String invoiceid = DBQueryEngine.GetMaxID("invoice");
        String paymentregid = DBQueryEngine.GetMaxID("payment_reg");
        String datetime = txtfdate.getText().trim() + " " + DateUp.getCurrentTime();

        String buzman = DBQueryEngine.GetMaxID("buz_man");

        ////save buz man
//        if (!invoicepay.txtsupid.getText().isEmpty()) {
//            buzman = invoicepay.txtsupid.getText().trim();
//        } else {// new supplier
//            model.DB2.putData("INSERT INTO buz_man(id,user_type_id,branch_id,fname,lname,contact_1,pobox,street_1,city,"
//                    + "status) values('" + buzman + "','" + DBQueryEngine.getIDofSelectedValuenoStatus("user_type", "type", "Customer") + "','" + ConstantData.branchId + "','" + invoicepay.txtfirstname.getText().trim() + "','" + invoicepay.txtlastname.getText().trim() + "','" + invoicepay.txtfcontact1.getText().trim() + "','" + invoicepay.txtPoBox.getText().trim() + "',"
//                    + "'" + invoicepay.txtaddress.getText().trim() + "','" + invoicepay.cmbCity.getSelectedItem() + "','" + ConstantData.Status_ACTIVE + "')");
//
//        }
        //////////Save INVOICE
//        model.DB2.putData("insert into invoice (id,user_id,branch_id,buz_man_id,holder_id,date,discount_opt,discount,grand_tot,note,status) values ('" + invoiceid + "',"
//                + "'" + ConstantData.logUserId.trim() + "','" + ConstantData.branchId + "',"
//                + "'" + buzman.trim() + "','" + cmbissue.getSelectedItem().toString().split("-")[0] + "',"
//                + "'" + datetime + "','" + cmbfinaldiscount.getSelectedItem() + "',"
//                + "'" + txtfinaldiscount.getText().trim() + "','" + txtgrandfinalamount.getText().trim() + "' , '" + txtareanote.getText().trim() + "' ,"
//                + "'" + ConstantData.Status_ACTIVE + "') ");
        for (int i = 0; i < tblinvo.getRowCount(); i++) {

            String tblitmid = tblinvo.getValueAt(i, 0).toString();
            String barcode = tblinvo.getValueAt(i, 2).toString();
            String serialno = tblinvo.getValueAt(i, 4).toString();
            String warranty = tblinvo.getValueAt(i, 5).toString();

            String cost = tblinvo.getValueAt(i, 6).toString();
            String sell = tblinvo.getValueAt(i, 7).toString();
            String qty = tblinvo.getValueAt(i, 8).toString();
            String discounttyp = tblinvo.getValueAt(i, 9).toString();
            String discount = tblinvo.getValueAt(i, 10).toString();
            String netamount = tblinvo.getValueAt(i, 11).toString();

            //////save Invoice details
            model.DB2.putData("insert into invoice_detail (invoice_id,item_id,batch_id,serailno,warranty,cost_price,sell_price,qty,discount_opt,discount,total,status) "
                    + " values ('" + invoiceid.trim() + "',"
                    + "'" + tblitmid.trim() + "','" + getBatchid(barcode) + "','" + serialno.trim() + "','" + warranty.trim() + "',"
                    + "'" + cost.trim() + "','" + sell.trim() + "',"
                    + "'" + qty.trim() + "','" + discounttyp.trim() + "',"
                    + "'" + discount.trim() + "','" + netamount.trim() + "',"
                    + "'" + ConstantData.Status_ACTIVE + "')");

            model.DB2.putData("update stock set qty=qty-'" + qty + "' where id='" + getStockID(barcode, serialno) + "'  ");
        }

//        invoicepay.SavePayment(conn, invoiceid, buzman);
//
//        if (conn != null) {
//            conn.commit();
//            Messages.normaljoption("Invoice Saved Successfully ! ");
//
//            invoicepay.dispose();
//            invoicepay = null;
//            clearAll();
//        }
    }

    private String getStockID(String barcode, String serialno) {

        String id = "0";
        try {
//            ResultSet rs = DB.getData("SELECT\n"
//                    + "stock.id\n"
//                    + "FROM\n"
//                    + "stock\n"
//                    + "WHERE\n"
//                    + "stock.batch_id = '" + btchid.trim() + "' AND\n"
//                    + "stock.`status` = '" + ConstantData.Status_ACTIVE + "'");

            ResultSet rs = DB.getData("SELECT\n"
                    + "stock.id\n"
                    + "FROM\n"
                    + "stock ,\n"
                    + "batch ,\n"
                    + "serial_details\n"
                    + "WHERE\n"
                    + "batch.barcode = '" + barcode.trim() + "' AND\n"
                    + "batch.id = serial_details.batch_id AND\n"
                    + "serial_details.serialno = '" + serialno.trim() + "' AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId + "'");

            if (rs.next()) {
                id = rs.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return id;

    }

    private void clearAll() {
        try {
            ClearItemdetails();
            clreaGrandAmountFeilds();

            DefaultTableModel df = (DefaultTableModel) tblinvo.getModel();
            df.setRowCount(0);
            TableItemAmountandItemCount();
            loadBranches();
            loadIssueCombo();
            loadCollectCombo();
            txtfdate.setValue(new DateUp().getCurrentDate());
            txtareanote.setText("");
            cmbissue.grabFocus();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

//    private boolean checkbatchQtyAvailablility() {
//
//        boolean bol = true;
//
//        return bol;
//    }
    private void setItembyBarcodeNo() {
        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "item.id,\n"
                    + "item.`name`,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "batch.warranty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "stock.qty,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "stock\n"
                    + "WHERE\n"
                    + "batch.barcode = '" + txtbarcode.getText().trim() + "' AND\n"
                    + "batch.item_id = item.id AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId.trim() + "' AND\n"
                    + "stock.qty > 0");
            if (rs.next()) {
                txtitemid.setText(rs.getString(1));
                txtitemname.setText(rs.getString(2));
                //   txtbarcode.setText(rs.getString(3));
                txtserialtype.setText(rs.getString(4));
                if (rs.getString(4).equals("None")) {
                    txtserialno.setEditable(false);
                } else {
                    txtserialno.setEditable(true);
                }
                txtserialno.setText(rs.getString(5));
                txtwarranty.setText(rs.getString(6));
                txtcostprice.setText(rs.getString(7));
                txtsellprice.setText(rs.getString(8));
                lblavailabaleqty.setText(rs.getString(9));
                cmbdiscount.setSelectedItem(rs.getString(10));
                txtdiscount.setText(rs.getString(11));
                txtserialno.grabFocus();
            } else {
                Messages.warningjoption("Sorry this Item Not Available in Stock ! ");
                ClearItemdetails();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setItembySerailNo() {

        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "item.id,\n"
                    + "item.`name`,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "batch.warranty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "stock.qty,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "stock\n"
                    + "WHERE\n"
                    + "serial_details.serialno = '" + txtserialno.getText().trim() + "' AND\n"
                    + "batch.item_id = item.id AND serialize.id in('2','3','1')  and\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId.trim() + "' AND\n"
                    + "stock.qty > 0");
            if (rs.next()) {
                txtitemid.setText(rs.getString(1));
                txtitemname.setText(rs.getString(2));
                txtbarcode.setText(rs.getString(3));
                txtserialtype.setText(rs.getString(4));
                //  txtserialno.setText(rs.getString(5));
                txtwarranty.setText(rs.getString(6));
                txtcostprice.setText(rs.getString(7));
                txtsellprice.setText(rs.getString(8));
                lblavailabaleqty.setText(rs.getString(9));
                cmbdiscount.setSelectedItem(rs.getString(10));
                txtdiscount.setText(rs.getString(11));
                txtqty.grabFocus();
                txtqty.selectAll();
            } else if (!txtserialno.getText().equals("0")) {
                Messages.warningjoption("Sorry this Item Not Available in Stock ! ");
                ClearItemdetails();
            } else {
                txtqty.grabFocus();
                txtqty.selectAll();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private boolean checkItemQtyAvailabale() {
        boolean bol = true;

        try {
            if (tblinvo.getRowCount() != 0) {
                // DefaultTableModel tbl = (DefaultTableModel) tblinvo.getModel();

                for (int i = 0; i < tblinvo.getRowCount(); i++) {
                    String name = tblinvo.getValueAt(i, 1).toString();
                    String barcode = tblinvo.getValueAt(i, 2).toString();
                    String serailno = tblinvo.getValueAt(i, 4).toString();
                    String qty = tblinvo.getValueAt(i, 8).toString();

                    if (checkItemQty(barcode, serailno, qty)) {// true if selected item qty not available

                        System.out.println("qty check");
                        Messages.errorjoption("Sorry this Item- " + name + " :  Barcode- " + barcode + " : "
                                + "Serialno-" + serailno + " :  Qty-" + qty + "  Currently in Out of Qty , Plaese Check Stock Availability for this Item ! ");
                        bol = false;
                        tblinvo.setRowSelectionInterval(i, i);

                        break;
                    } else {
                        bol = true;
                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return bol;

    }

    private boolean checkItemQty(String barcode, String serailno, String qty) {

        boolean bol = false;
        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "stock.id\n"
                    + "FROM\n"
                    + "stock ,\n"
                    + "batch ,\n"
                    + "serial_details\n"
                    + "WHERE\n"
                    + "batch.barcode = '" + barcode.trim() + "' AND\n"
                    + "batch.id = serial_details.batch_id AND\n"
                    + "serial_details.serialno = '" + serailno.trim() + "' AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId + "' AND\n"
                    + "stock.qty < '" + qty.trim() + "'");
            if (rs.next()) {
                bol = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return bol;
    }

    private String getBatchid(String barcode) {
        String id = "0";
        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "batch.id\n"
                    + "FROM\n"
                    + "batch\n"
                    + "WHERE\n"
                    + "batch.barcode = '" + barcode.trim() + "'");
            if (rs.next()) {
                id = rs.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return id;

    }

    private void CalculatePieces() {
        try {
            double pieces = 0.0;

            if (tblinvo.getRowCount() != 0) {
                for (int i = 0; i < tblinvo.getRowCount(); i++) {

                    pieces += Double.parseDouble(tblinvo.getValueAt(i, 8).toString());

                }
            }

            lblpieces.setText(Format.decimal3.format(pieces));
        } catch (Exception e) {
            e.printStackTrace();

        }

    }

}
