/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.AllCalculations;
import com.ConstantData;
import com.DBQueryEngine;
import com.Format;
import com.Logs;
import com.Validation;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import model.DB;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class Stock extends javax.swing.JDialog {

    /**
     * Creates new form Stock
     */
    public Stock(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        firstLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtitemname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        cmbsubcategory = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtbarcode = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        txtserialno = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        lblitemcount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtcostprice = new javax.swing.JTextField();
        cmbbranch = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnfilter = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmboption = new javax.swing.JComboBox<>();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Stock");
        jLabel1.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Item Quick Search"));

        jLabel4.setText("Item Name");

        txtitemname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtitemnameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtitemnameKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Category");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Sub Category");

        cmbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryActionPerformed(evt);
            }
        });
        cmbCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCategoryKeyPressed(evt);
            }
        });

        cmbsubcategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbsubcategoryActionPerformed(evt);
            }
        });
        cmbsubcategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbsubcategoryKeyPressed(evt);
            }
        });

        jLabel7.setText("Barcode");

        txtbarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbarcodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbarcodeKeyReleased(evt);
            }
        });

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtserialno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtserialnoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtserialnoKeyReleased(evt);
            }
        });

        jLabel8.setText("Serial No");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(28, 28, 28)
                        .addComponent(txtserialno, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbsubcategory, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtitemname, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(105, 105, 105))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbsubcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtitemname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtserialno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addContainerGap())
        );

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Category", "Sub Category", "Name", "Batch No", "Barcode", "Serial Type", "Serial No", "Qty", "Cost Price", "Sell Price", "Discount Opt", "Discount", "Last Sell Price", "Branch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl);
        if (tbl.getColumnModel().getColumnCount() > 0) {
            tbl.getColumnModel().getColumn(0).setPreferredWidth(5);
            tbl.getColumnModel().getColumn(11).setPreferredWidth(0);
        }

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblitemcount.setText("0");

        jLabel3.setText("Item Count");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filter"));

        jLabel9.setText("Branch");

        txtcostprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcostpriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcostpriceKeyReleased(evt);
            }
        });

        cmbbranch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbbranchKeyPressed(evt);
            }
        });

        jLabel2.setText("Item Cost Price Rs.");

        btnfilter.setText("Filter");
        btnfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfilterActionPerformed(evt);
            }
        });

        jLabel10.setText("Option");

        cmboption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "By Branch", "By Cost Price" }));
        cmboption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboptionActionPerformed(evt);
            }
        });
        cmboption.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmboptionKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmboption, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbbranch, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtcostprice, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134)
                .addComponent(btnfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcostprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(cmbbranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnfilter)
                    .addComponent(jLabel10)
                    .addComponent(cmboption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addGap(28, 28, 28)
                        .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblitemcount))
                .addGap(13, 13, 13)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtitemnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnameKeyReleased
        if (!txtitemname.getText().isEmpty()) {
            loadByItemname();
        } else {

            clearAll();

        }

        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_txtitemnameKeyReleased

    private void cmbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryActionPerformed

        if (cmbCategory.getSelectedIndex() != 0) {
            loadSubCategoryCombo(cmbCategory.getSelectedItem().toString());
            loadCategorystoTable();
        } else {
            cmbsubcategory.removeAllItems();
            txtitemname.setText("");

            txtbarcode.setText("");
            txtserialno.setText("");
//            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
//            dtm.setRowCount(0);

        }

        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_cmbCategoryActionPerformed

    private void cmbCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCategoryKeyPressed
        if (cmbCategory.getSelectedIndex() != 0) {

            if (evt.getKeyCode() == 10) {
                cmbsubcategory.grabFocus();
            }

        }
    }//GEN-LAST:event_cmbCategoryKeyPressed

    private void cmbsubcategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbsubcategoryActionPerformed

        if (cmbCategory.getSelectedIndex() != 0) {

            loadSubCategorystoTable();
        } else {

            cmbsubcategory.removeAllItems();
            txtbarcode.setText("");
            txtserialno.setText("");
            txtitemname.setText("");
//            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
//            dtm.setRowCount(0);

        }

        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_cmbsubcategoryActionPerformed

    private void cmbsubcategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbsubcategoryKeyPressed
        if (evt.getKeyCode() == 10) {
            txtitemname.grabFocus();
        }
    }//GEN-LAST:event_cmbsubcategoryKeyPressed

    private void txtbarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbarcodeKeyReleased
//        if (!txtbarcode.getText().isEmpty()) {
////            loadByBarcode();
//        } else {
//            clearAll();
//        }
//
//        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_txtbarcodeKeyReleased

    private void txtserialnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtserialnoKeyReleased
//        if (!txtserialno.getText().isEmpty()) {
////            loadByBarcode();
//        } else {
//            //clearAll();
//        }

        // lblitemcount.setText("" + tbl.getRowCount());

    }//GEN-LAST:event_txtserialnoKeyReleased

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked

    }//GEN-LAST:event_tblMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        clearAll();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtbarcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbarcodeKeyPressed
        if (evt.getKeyCode() == 10) {

            if (!txtbarcode.getText().isEmpty()) {
                loadByBarcode();
            } else {
                cmbCategory.setSelectedIndex(0);
                cmbsubcategory.removeAllItems();
                txtitemname.setText("");
                txtserialno.setText("");
                loadAllStock50();
            }

            lblitemcount.setText("" + tbl.getRowCount());
        }
    }//GEN-LAST:event_txtbarcodeKeyPressed

    private void txtserialnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtserialnoKeyPressed
        if (evt.getKeyCode() == 10) {
//       
            if (!txtserialno.getText().isEmpty()) {
                loadBySerialNo();
            } else {
                cmbCategory.setSelectedIndex(0);
                cmbsubcategory.removeAllItems();
                txtitemname.setText("");
                txtbarcode.setText("");
                loadAllStock50();
            }

            lblitemcount.setText("" + tbl.getRowCount());
        }
    }//GEN-LAST:event_txtserialnoKeyPressed

    private void btnfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfilterActionPerformed
        if (cmboption.getSelectedIndex() == 0) {
            cmboption.grabFocus();

        } else if (cmboption.getSelectedIndex() == 1) { //by branch
            if (cmbbranch.getSelectedIndex() == 0) {
                cmbbranch.grabFocus();
            } else {
                filterCall();
            }
        } else if (cmboption.getSelectedIndex() == 2) { //by cost price
            if (!txtcostprice.getText().isEmpty()) {
                filterCall();
            } else {
                txtcostprice.grabFocus();
            }

        }
        new Logs().createLog("Stock Filter", ConstantData.logUserId);
        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_btnfilterActionPerformed

    private void cmboptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmboptionActionPerformed
        cmbbranch.setSelectedIndex(0);
        txtcostprice.setText("");
        setEnableDisableFields();
    }//GEN-LAST:event_cmboptionActionPerformed

    private void txtcostpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcostpriceKeyReleased
        Validation.validatedouble(txtcostprice);
    }//GEN-LAST:event_txtcostpriceKeyReleased

    private void txtitemnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtbarcode.grabFocus();
        }

    }//GEN-LAST:event_txtitemnameKeyPressed

    private void cmboptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmboptionKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbbranch.grabFocus();
        }
    }//GEN-LAST:event_cmboptionKeyPressed

    private void cmbbranchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbbranchKeyPressed
        if (evt.getKeyCode() == 10) {
            txtcostprice.grabFocus();
        }
    }//GEN-LAST:event_cmbbranchKeyPressed

    private void txtcostpriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcostpriceKeyPressed
        if (evt.getKeyCode() == 10) {
            btnfilter.grabFocus();
        }
    }//GEN-LAST:event_txtcostpriceKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Stock dialog = new Stock(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnfilter;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox<String> cmbbranch;
    private javax.swing.JComboBox<String> cmboption;
    private javax.swing.JComboBox cmbsubcategory;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtbarcode;
    private javax.swing.JTextField txtcostprice;
    private javax.swing.JTextField txtitemname;
    private javax.swing.JTextField txtserialno;
    // End of variables declaration//GEN-END:variables

    private void loadByItemname() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "stock.qty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "stock ,\n"
                    + "category ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "item.`name` LIKE '" + txtitemname.getText().trim() + "%' AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.`status` IN ('1', '2') AND stock.qty > 0 and \n"
                    + "stock.branch_id = branch.id  ORDER BY\n"
                    + "batch.id DESC");

            while (rs.next()) {

                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);
                String qty = rs.getString(9);
                String cost = rs.getString(10);
                double sell_price = rs.getDouble(11);
                String discountopt = rs.getString(12);
                double discount = rs.getDouble(13);
                String branch = rs.getString(14);
                double lastsellprice = 0.0;
                if (rs.getString(12).equals("%")) {
                    lastsellprice = Double.parseDouble(AllCalculations.DiscountforPrecentage(sell_price, discount));
                } else {
                    lastsellprice = sell_price - discount;
                }

                if (cmboption.getSelectedIndex() == 1 && branch.equals(cmbbranch.getSelectedItem())) { // by branch

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 2 && cost.equals(txtcostprice.getText().trim())) { // by costprice
                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 0) {

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadSubCategoryCombo(String category) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbsubcategory.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "sub_category.sub_category\n"
                    + "FROM\n"
                    + "category ,\n"
                    + "sub_category\n"
                    + "WHERE\n"
                    + "sub_category.`status` = '" + ConstantData.Status_ACTIVE + "' AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "category.category = '" + category + "'");
            while (rs.next()) {

                dcbm.addElement(rs.getString(1));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadCategorystoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "stock.qty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "stock ,\n"
                    + "category ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + " category.category='" + cmbCategory.getSelectedItem() + "' AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.`status` IN ('1', '2') AND stock.qty > 0 and\n"
                    + "stock.branch_id = branch.id  ORDER BY\n"
                    + "batch.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);
                String qty = rs.getString(9);
                String cost = rs.getString(10);
                double sell_price = rs.getDouble(11);
                String discountopt = rs.getString(12);
                double discount = rs.getDouble(13);
                String branch = rs.getString(14);

                double lastsellprice = 0.0;
                if (rs.getString(12).equals("%")) {
                    lastsellprice = Double.parseDouble(AllCalculations.DiscountforPrecentage(sell_price, discount));
                } else {
                    lastsellprice = sell_price - discount;
                }

                if (cmboption.getSelectedIndex() == 1 && branch.equals(cmbbranch.getSelectedItem())) { // by branch

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);

                } else if (cmboption.getSelectedIndex() == 2 && cost.equals(txtcostprice.getText().trim())) { // by costprice

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);

                } else if (cmboption.getSelectedIndex() == 0) {

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void firstLoad() {
        LoadItemstoTxt();
        DBQueryEngine.loadSelectedComboItems(cmbCategory, "SELECT\n"
                + "category.category\n"
                + "FROM\n"
                + "category\n"
                + "WHERE\n"
                + "category.`status` = '" + ConstantData.Status_ACTIVE + "'");

        loadSerialNo();
        loadBranches();
        loadAllStock50();
        lblitemcount.setText("" + tbl.getRowCount());
        new Logs().createLog("Stock open", ConstantData.logUserId);
    }

    private void LoadItemstoTxt() {
        ArrayList<String> li = new ArrayList<String>();

        //  TextAutoCompleter tx = new TextAutoCompleter(txtitemname);
        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "item.`name`\n"
                    + "FROM\n"
                    + "item\n"
                    + "WHERE\n"
                    + "item.`status` in ('1','2') ");
            while (rs.next()) {
                li.add(rs.getString(1));
                //tx.addItem(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        AutoCompleteDecorator.decorate(txtitemname, li, true);
    }

    private void loadSerialNo() {
        List<String> li = new ArrayList<String>();

        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "serial_details.serialno\n"
                    + "FROM\n"
                    + "serial_details\n"
                    + "WHERE\n"
                    + "serial_details.`status`  in ('1','2') and serial_details.serialno<>0;");
            while (rs.next()) {
                li.add(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        AutoCompleteDecorator.decorate(txtserialno, li, true);

    }

    private void clearAll() {
//       DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
//            dtm.setRowCount(0);

        cmbCategory.setSelectedIndex(0);
        cmbsubcategory.removeAllItems();
        txtitemname.setText("");
        txtbarcode.setText("");
        txtserialno.setText("");
        txtcostprice.setText("");
        cmboption.setSelectedIndex(0);
        loadAllStock50();

    }

    private void loadBranches() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbbranch.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "branch.id,\n"
                    + "branch.`name`,\n"
                    + "branch.`status`\n"
                    + "FROM\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "branch.`status` = '1'");
            while (rs.next()) {

                dcbm.addElement(rs.getString(2));
            }

//            if (dcbm.getSize() > 1 && !ConstantData.branchName.isEmpty()) {
//                dcbm.setSelectedItem(ConstantData.branchName);
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadAllStock50() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "stock.qty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "stock ,\n"
                    + "category ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    // + "item.`name` LIKE '" + txtitemname.getText().trim() + "%' AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.`status` IN ('1', '2') AND stock.qty > 0 and \n"
                    + "stock.branch_id = branch.id  ORDER BY\n"
                    + "batch.id DESC LIMIT 50");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);
                String qty = rs.getString(9);
                String cost = rs.getString(10);
                double sell_price = rs.getDouble(11);
                String discountopt = rs.getString(12);
                double discount = rs.getDouble(13);
                String branch = rs.getString(14);

                double lastsellprice = 0.0;
                if (rs.getString(12).equals("%")) {
                    lastsellprice = Double.parseDouble(AllCalculations.DiscountforPrecentage(sell_price, discount));
                } else {
                    lastsellprice = sell_price - discount;
                }

                if (cmboption.getSelectedIndex() == 1 && branch.equals(cmbbranch.getSelectedItem())) { // by branch

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 2 && cost.equals(txtcostprice.getText())) { // by costprice
                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 0) {

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadSubCategorystoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "stock.qty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "stock ,\n"
                    + "category ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "category.category='" + cmbCategory.getSelectedItem() + "' and sub_category.sub_category='" + cmbsubcategory.getSelectedItem() + "' AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.`status` IN ('1', '2') AND  stock.qty > 0 and \n"
                    + "stock.branch_id = branch.id  ORDER BY\n"
                    + "batch.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);
                String qty = rs.getString(9);
                String cost = rs.getString(10);
                double sell_price = rs.getDouble(11);
                String discountopt = rs.getString(12);
                double discount = rs.getDouble(13);
                String branch = rs.getString(14);

                double lastsellprice = 0.0;
                if (rs.getString(12).equals("%")) {
                    lastsellprice = Double.parseDouble(AllCalculations.DiscountforPrecentage(sell_price, discount));
                } else {
                    lastsellprice = sell_price - discount;
                }

                if (cmboption.getSelectedIndex() == 1 && branch.equals(cmbbranch.getSelectedItem())) { // by branch

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 2 && cost.equals(txtcostprice.getText())) { // by costprice
                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 0) {

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadByBarcode() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "stock.qty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "stock ,\n"
                    + "category ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + " batch.barcode ='" + txtbarcode.getText().trim() + "'  AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.`status` IN ('1', '2') AND  stock.qty > 0 and\n"
                    + "stock.branch_id = branch.id  ORDER BY\n"
                    + "batch.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);
                String qty = rs.getString(9);
                String cost = rs.getString(10);
                double sell_price = rs.getDouble(11);
                String discountopt = rs.getString(12);
                double discount = rs.getDouble(13);
                String branch = rs.getString(14);

                double lastsellprice = 0.0;
                if (rs.getString(12).equals("%")) {
                    lastsellprice = Double.parseDouble(AllCalculations.DiscountforPrecentage(sell_price, discount));
                } else {
                    lastsellprice = sell_price - discount;
                }

                if (cmboption.getSelectedIndex() == 1 && branch.equals(cmbbranch.getSelectedItem())) { // by branch

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 2 && cost.equals(txtcostprice.getText())) { // by costprice
                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 0) {

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadBySerialNo() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno,\n"
                    + "stock.qty,\n"
                    + "batch.cost_price,\n"
                    + "batch.sell_price,\n"
                    + "batch.discount_opt,\n"
                    + "batch.discount,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "stock ,\n"
                    + "category ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + " serial_details.serialno='" + txtserialno.getText().trim() + "' AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.`status` IN ('1', '2') AND  stock.qty > 0 and\n"
                    + "stock.branch_id = branch.id  ORDER BY\n"
                    + "batch.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);
                String qty = rs.getString(9);
                String cost = rs.getString(10);
                double sell_price = rs.getDouble(11);
                String discountopt = rs.getString(12);
                double discount = rs.getDouble(13);
                String branch = rs.getString(14);

                double lastsellprice = 0.0;
                if (rs.getString(12).equals("%")) {
                    lastsellprice = Double.parseDouble(AllCalculations.DiscountforPrecentage(sell_price, discount));
                } else {
                    lastsellprice = sell_price - discount;
                }

                if (cmboption.getSelectedIndex() == 1 && branch.equals(cmbbranch.getSelectedItem())) { // by branch

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 2 && cost.equals(txtcostprice.getText())) { // by costprice
                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                } else if (cmboption.getSelectedIndex() == 0) {

                    Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial, qty,
                        cost, sell_price, discountopt, discount, Format.decimal3.format(lastsellprice), branch};
                    dtm.addRow(arr);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void filterCall() {

        if (!txtitemname.getText().isEmpty()) {

            loadByItemname();
        } else if (cmbCategory.getSelectedIndex() != 0 && cmbsubcategory.getSelectedIndex() != 0) { //category subcateg

            loadSubCategorystoTable();
        } else if (cmbCategory.getSelectedIndex() != 0) { //category

            loadCategorystoTable();

        } else if (!txtbarcode.getText().isEmpty()) { //barcode
            loadByBarcode();
        } else if (!txtserialno.getText().isEmpty()) { //serial
            loadBySerialNo();
        } else { //all

            loadAllStock50();
        }
    }

    private void setEnableDisableFields() {
        if (cmboption.getSelectedIndex() == 1) {//brnch
            cmbbranch.setEnabled(true);
            txtcostprice.setEditable(false);
        } else if (cmboption.getSelectedIndex() == 2) { // cost
            cmbbranch.setEnabled(false);
            txtcostprice.setEditable(true);
        } else {
            cmbbranch.setEnabled(true);
            txtcostprice.setEditable(true);
        }

    }

}
