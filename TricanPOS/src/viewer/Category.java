/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.ConstantData;
import com.DBQueryEngine;
import com.Empty;
import com.Logs;
import com.Messages;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lasitha Ranawaka
 */
public class Category extends javax.swing.JDialog {

    boolean block = true;// table item select changes

    public Category(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        firstLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblsubcat = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblCategoryName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        btncat = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_Category = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtsubid = new javax.swing.JTextField();
        lblcategory = new javax.swing.JLabel();
        lblsubstatus = new javax.swing.JLabel();
        cmbsubcatstatus = new javax.swing.JComboBox();
        btnsubcat = new javax.swing.JButton();
        btnsubclr = new javax.swing.JButton();
        cmbcategory = new javax.swing.JComboBox<>();
        lblsubcategory = new javax.swing.JLabel();
        txtsubcategory = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(0, 51, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sub Category");
        jLabel1.setOpaque(true);

        tblsubcat.setBackground(new java.awt.Color(204, 255, 204));
        tblsubcat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Sub Category", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblsubcat.setToolTipText("You Can not Update Subcategory  \"None\"");
        tblsubcat.getTableHeader().setReorderingAllowed(false);
        tblsubcat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblsubcatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblsubcat);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setText("ID");

        txtId.setEditable(false);
        txtId.setEnabled(false);

        lblCategoryName.setText("Category Name");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNameKeyReleased(evt);
            }
        });

        lblStatus.setText("Status");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Active", "Deactive" }));
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });
        cmbStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbStatusKeyPressed(evt);
            }
        });

        btncat.setText("Submit");
        btncat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncatActionPerformed(evt);
            }
        });
        btncat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btncatKeyPressed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCategoryName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btncat, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCategoryName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btncat)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setBackground(new java.awt.Color(0, 204, 51));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Category");
        jLabel3.setOpaque(true);

        tbl_Category.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_Category.getTableHeader().setReorderingAllowed(false);
        tbl_Category.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_CategoryMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_Category);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setText("ID");

        txtsubid.setEditable(false);
        txtsubid.setEnabled(false);

        lblcategory.setText("Category");

        lblsubstatus.setText("Status");

        cmbsubcatstatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Active", "Deactive" }));
        cmbsubcatstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbsubcatstatusActionPerformed(evt);
            }
        });
        cmbsubcatstatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbsubcatstatusKeyPressed(evt);
            }
        });

        btnsubcat.setText("Submit");
        btnsubcat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubcatActionPerformed(evt);
            }
        });
        btnsubcat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnsubcatKeyPressed(evt);
            }
        });

        btnsubclr.setText("Clear");
        btnsubclr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubclrActionPerformed(evt);
            }
        });

        cmbcategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbcategoryActionPerformed(evt);
            }
        });
        cmbcategory.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbcategoryPropertyChange(evt);
            }
        });
        cmbcategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbcategoryKeyPressed(evt);
            }
        });

        lblsubcategory.setText("Sub Category");

        txtsubcategory.setToolTipText("No Subcategory?put \"None\"");
        txtsubcategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtsubcategoryKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsubcategoryKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblsubstatus)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbsubcatstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtsubid, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnsubcat, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnsubclr, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblcategory)
                        .addGap(18, 18, 18)
                        .addComponent(cmbcategory, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblsubcategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtsubcategory, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtsubid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblcategory)
                    .addComponent(cmbcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblsubcategory)
                    .addComponent(txtsubcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblsubstatus)
                    .addComponent(cmbsubcatstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsubcat)
                    .addComponent(btnsubclr))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btncatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncatActionPerformed
        addnew();
    }//GEN-LAST:event_btncatActionPerformed

    private void tblsubcatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblsubcatMouseClicked
        if (evt.getClickCount() == 2) {
            block = false;

            if (tbl_Category.getRowCount() != 0) {
                setSubCategorytoFields();
            }
            block = true;
        }
    }//GEN-LAST:event_tblsubcatMouseClicked

    private void txtNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyPressed
        if (evt.getKeyCode() == 10) {

            cmbStatus.grabFocus();

        }
    }//GEN-LAST:event_txtNameKeyPressed

    private void cmbStatusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbStatusKeyPressed
        if (evt.getKeyCode() == 10) {
            btncat.grabFocus();

        }
    }//GEN-LAST:event_cmbStatusKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        clear();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyReleased
        if (txtName.getText().isEmpty()) {
            clear();
            loadtbl();
        } else {
            loadSelectedCtegory();
        }
    }//GEN-LAST:event_txtNameKeyReleased

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void tbl_CategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_CategoryMouseClicked
        if (evt.getClickCount() == 2) {
            if (tbl_Category.getRowCount() != 0) {
                setCategorytoFields();
            }
        }
    }//GEN-LAST:event_tbl_CategoryMouseClicked

    private void cmbsubcatstatusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbsubcatstatusKeyPressed

        if (evt.getKeyCode() == 10) {
            btnsubcat.grabFocus();

        }
    }//GEN-LAST:event_cmbsubcatstatusKeyPressed

    private void btnsubcatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubcatActionPerformed

        if (Empty.ComboBox(cmbcategory, Empty.Text + lblcategory.getText())) {
        } else if (Empty.TxtFieldEmpty(txtsubcategory, Empty.Text + lblsubcategory.getText())) {
        } else if (Empty.ComboBox(cmbsubcatstatus, Empty.Text + lblsubstatus.getText())) {
        } else {

            SaveUpdateSubCategory();
        }
    }//GEN-LAST:event_btnsubcatActionPerformed

    private void btnsubclrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubclrActionPerformed
        clearSubCategory();
    }//GEN-LAST:event_btnsubclrActionPerformed

    private void cmbcategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbcategoryActionPerformed
        if (block) {

            if (cmbcategory.getSelectedIndex() != 0) {
                loadSelctedCategorytoTable();
            } else {
                loadSubCategoryTable();
            }
        }
    }//GEN-LAST:event_cmbcategoryActionPerformed

    private void cmbcategoryPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbcategoryPropertyChange

    }//GEN-LAST:event_cmbcategoryPropertyChange

    private void cmbcategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbcategoryKeyPressed

        if (evt.getKeyCode() == 10) {
            txtsubcategory.grabFocus();

        }
    }//GEN-LAST:event_cmbcategoryKeyPressed

    private void txtsubcategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsubcategoryKeyPressed

        if (evt.getKeyCode() == 10) {
            cmbsubcatstatus.grabFocus();

        }
    }//GEN-LAST:event_txtsubcategoryKeyPressed

    private void btnsubcatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnsubcatKeyPressed
        if (evt.getKeyCode() == 10) {
            if (Empty.ComboBox(cmbcategory, Empty.Text + lblcategory.getText())) {
            } else if (Empty.TxtFieldEmpty(txtsubcategory, Empty.Text + lblsubcategory.getText())) {
            } else if (Empty.ComboBox(cmbsubcatstatus, Empty.Text + lblsubstatus.getText())) {
            } else {

                SaveUpdateSubCategory();
            }

        }

    }//GEN-LAST:event_btnsubcatKeyPressed

    private void btncatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btncatKeyPressed
        if (evt.getKeyCode() == 10) {
            addnew();
        }
    }//GEN-LAST:event_btncatKeyPressed

    private void txtsubcategoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsubcategoryKeyReleased
        if (block) {

            if (!txtsubcategory.getText().isEmpty()) {
                loadSelctedsubCategorytoTable();
            } else {
                loadSubCategoryTable();
            }
        }
    }//GEN-LAST:event_txtsubcategoryKeyReleased

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        if (txtName.getText().isEmpty()) {

            if (cmbStatus.getSelectedIndex() != 0) {

                loadByStatustoTable();
            } else {
                loadtbl();
            }
        }
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void cmbsubcatstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbsubcatstatusActionPerformed
        if (txtsubcategory.getText().isEmpty() && cmbcategory.getSelectedIndex() == 0) {

            if (cmbsubcatstatus.getSelectedIndex() != 0) {

                loadSubCategoryByStatustoTable();
            } else {
                loadSubCategoryTable();
            }
        }
    }//GEN-LAST:event_cmbsubcatstatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Category dialog = new Category(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncat;
    private javax.swing.JButton btnsubcat;
    private javax.swing.JButton btnsubclr;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox<String> cmbcategory;
    private javax.swing.JComboBox cmbsubcatstatus;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCategoryName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblcategory;
    private javax.swing.JLabel lblsubcategory;
    private javax.swing.JLabel lblsubstatus;
    private javax.swing.JTable tbl_Category;
    private javax.swing.JTable tblsubcat;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtsubcategory;
    private javax.swing.JTextField txtsubid;
    // End of variables declaration//GEN-END:variables

    private void addnew() {
        if (Empty.TxtFieldEmpty(txtName, Empty.Text + lblCategoryName.getText())) {
        } else if (Empty.ComboBox(cmbStatus, Empty.Text + lblStatus.getText())) {
        } else {
            submit();

        }
    }

    private void submit() {

        int ID = Integer.parseInt(GetID());
        if (txtId.getText().trim().isEmpty()) {
            //save
            try {
                if (DBQueryEngine.isAlreadyExist("category", "category", txtName.getText().trim())) {

                    model.DB.putData("INSERT INTO category (category,status)values('" + txtName.getText().trim() + "','" + ConstantData.getStatusID(cmbStatus) + "')");
                    if (DBQueryEngine.isAlreadyExist("SELECT\n"
                            + "sub_category.id\n"
                            + "FROM\n"
                            + "category ,\n"
                            + "sub_category\n"
                            + "WHERE\n"
                            + "sub_category.`status` = '" + ConstantData.Status_ACTIVE + "' AND\n"
                            + "sub_category.category_id = category.id AND\n"
                            + "category.category = '" + txtName.getText().trim() + "' AND\n"
                            + "sub_category.sub_category = 'None'")) {

                        model.DB.putData("INSERT INTO sub_category (category_id,sub_category,status) values('" + DBQueryEngine.getIDofSelectedValue("category", "category", txtName.getText().trim()) + "','None','" + ConstantData.Status_ACTIVE + "')");

                    }

                    com.Messages.normaljoption("Data Saved!");
                } else {
                    Messages.warningjoption("This Category Already Exist ! ");
                }
            } catch (Exception e) {
                Messages.internalErrorMessage();
                e.printStackTrace();
            }

        } else {
            try {

                model.DB.putData("UPDATE category SET category='" + txtName.getText().trim() + "',status='" + ConstantData.getStatusID(cmbStatus) + "' where id='" + txtId.getText().trim() + "' ");
                Messages.normaljoption("Data Updated !");
            } catch (Exception e) {
                Messages.internalErrorMessage();
                e.printStackTrace();
            }

        }

        clear();
        loadSubCategoryTable();
        new Logs().createLog("Category reg", ConstantData.logUserId);
    }

    private void clear() {

        DBQueryEngine.loadSelectedComboItems(cmbcategory, "SELECT\n"
                + "category.category\n"
                + "FROM\n"
                + "category\n"
                + "WHERE\n"
                + "category.`status` = '" + ConstantData.Status_ACTIVE + "'");

        txtId.setText("");
        txtName.setText("");
        cmbStatus.setSelectedIndex(0);
        loadtbl();
       
        txtName.grabFocus();
    }

    private String GetID() { // return next new id
        String id = "1";
        try {
            ResultSet rs = model.DB.getData("select max(id) from category");

            if (rs.next()) {

                if (rs.getString(1) != null) {
                    int num = Integer.parseInt(rs.getString(1));
                    num++;
                    id = "" + num;
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return id;
    }

    private void loadtbl() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_Category.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "category.id,\n"
                    + "category.category,\n"
                    + "category.`status`\n"
                    + "FROM\n"
                    + "category\n"
                    + "ORDER BY\n"
                    + "category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String status;
                if (rs.getString(3).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, name, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {

            e.printStackTrace();
        }
    }

    private void firstLoad() {
        loadtbl();
        DBQueryEngine.loadSelectedComboItems(cmbcategory, "SELECT\n"
                + "category.category\n"
                + "FROM\n"
                + "category\n"
                + "WHERE\n"
                + "category.`status` = '" + ConstantData.Status_ACTIVE + "'");

        loadSubCategoryTable();
        txtName.grabFocus();
    }

    private void setCategorytoFields() {

        txtId.setText(tbl_Category.getValueAt(tbl_Category.getSelectedRow(), 0).toString());
        txtName.setText(tbl_Category.getValueAt(tbl_Category.getSelectedRow(), 1).toString());
        cmbStatus.setSelectedItem(tbl_Category.getValueAt(tbl_Category.getSelectedRow(), 2).toString());

    }

    private void loadSubCategoryTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblsubcat.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "sub_category.id,\n"
                    + "sub_category.category_id,\n"
                    + "sub_category.sub_category,\n"
                    + "sub_category.`status`\n"
                    + "FROM\n"
                    + "sub_category\n"
                    + "ORDER BY\n"
                    + "sub_category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = DBQueryEngine.getIDofSelectedValue("category", "category", "id", rs.getString(2));
                String subcateg = rs.getString(3);
                String status;
                if (rs.getString(4).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, category, subcateg, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SaveUpdateSubCategory() {

        if (txtsubid.getText().trim().isEmpty()) {
            //save
            try {
                if (DBQueryEngine.isAlreadyExist("SELECT\n"
                        + "sub_category.id\n"
                        + "FROM\n"
                        + "category ,\n"
                        + "sub_category\n"
                        + "WHERE\n"
                        + "sub_category.`status` = '" + ConstantData.Status_ACTIVE + "' AND\n"
                        + "sub_category.category_id = category.id AND\n"
                        + "category.category = '" + cmbcategory.getSelectedItem() + "' AND\n"
                        + "sub_category.sub_category = '" + txtsubcategory.getText() + "'")) {

                    if (!txtsubcategory.getText().equalsIgnoreCase("None")) { /// not none

                        if (DBQueryEngine.isAlreadyExist("SELECT\n"
                                + "sub_category.id\n"
                                + "FROM\n"
                                + "category ,\n"
                                + "sub_category\n"
                                + "WHERE\n"
                                + "sub_category.`status` = '" + ConstantData.Status_ACTIVE + "' AND\n"
                                + "sub_category.category_id = category.id AND\n"
                                + "category.category = '" + cmbcategory.getSelectedItem() + "' AND\n"
                                + "sub_category.sub_category = 'None'")) {

                            model.DB.putData("INSERT INTO sub_category (category_id,sub_category,status) values('" + DBQueryEngine.getIDofSelectedValue("category", "category", cmbcategory.getSelectedItem().toString()) + "','None','" + ConstantData.getStatusID(cmbsubcatstatus) + "')");

                        }
                    }
                    model.DB.putData("INSERT INTO sub_category (category_id,sub_category,status) values('" + DBQueryEngine.getIDofSelectedValue("category", "category", cmbcategory.getSelectedItem().toString()) + "','" + txtsubcategory.getText().trim() + "','" + ConstantData.getStatusID(cmbsubcatstatus) + "')");
                    com.Messages.normaljoption("Data Saved!");
                } else {
                    Messages.warningjoption("This Sub Category Already Exist  ! ");
                }
            } catch (Exception e) {
                Messages.internalErrorMessage();
                e.printStackTrace();
            }

        } else {
            try {

                model.DB.putData("UPDATE sub_category SET category_id='" + DBQueryEngine.getIDofSelectedValue("category", "category", cmbcategory.getSelectedItem().toString()) + "',sub_category='" + txtsubcategory.getText().trim() + "',status='" + ConstantData.getStatusID(cmbsubcatstatus) + "' where id='" + txtsubid.getText().trim() + "' ");
                Messages.normaljoption("Data Updated !");
            } catch (Exception e) {
                Messages.internalErrorMessage();
                e.printStackTrace();
            }

        }

        clearSubCategory();
        new Logs().createLog("SubCategory reg", ConstantData.logUserId);
    }

    private void clearSubCategory() {

        DBQueryEngine.loadSelectedComboItems(cmbcategory, "SELECT\n"
                + "category.category\n"
                + "FROM\n"
                + "category\n"
                + "WHERE\n"
                + "category.`status` = '" + ConstantData.Status_ACTIVE + "'");

        loadSubCategoryTable();
        txtsubid.setText("");
        txtsubcategory.setText("");
        cmbsubcatstatus.setSelectedIndex(0);
        cmbcategory.grabFocus();
    }

    private void setSubCategorytoFields() {

        if (!tblsubcat.getValueAt(tblsubcat.getSelectedRow(), 2).toString().equalsIgnoreCase("None")) {
            txtsubid.setText(tblsubcat.getValueAt(tblsubcat.getSelectedRow(), 0).toString());
            cmbcategory.setSelectedItem(tblsubcat.getValueAt(tblsubcat.getSelectedRow(), 1).toString());
            txtsubcategory.setText(tblsubcat.getValueAt(tblsubcat.getSelectedRow(), 2).toString());
            cmbsubcatstatus.setSelectedItem(tblsubcat.getValueAt(tblsubcat.getSelectedRow(), 3).toString());
        }

    }

    private void loadSelctedCategorytoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblsubcat.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "sub_category.id,\n"
                    + "sub_category.category_id,\n"
                    + "sub_category.sub_category,\n"
                    + "sub_category.`status`\n"
                    + "FROM\n"
                    + "category ,\n"
                    + "sub_category\n"
                    + "WHERE\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "category.category = '" + cmbcategory.getSelectedItem() + "'\n"
                    + "ORDER BY\n"
                    + "sub_category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = DBQueryEngine.getIDofSelectedValue("category", "category", "id", rs.getString(2));
                String subcateg = rs.getString(3);
                String status;
                if (rs.getString(4).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, category, subcateg, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadSelctedsubCategorytoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblsubcat.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "sub_category.id,\n"
                    + "sub_category.category_id,\n"
                    + "sub_category.sub_category,\n"
                    + "sub_category.`status`\n"
                    + "FROM\n"
                    + "category ,\n"
                    + "sub_category\n"
                    + "WHERE\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "category.category = '" + cmbcategory.getSelectedItem() + "' and sub_category.sub_category like '" + txtsubcategory.getText().trim() + "%' \n"
                    + "ORDER BY\n"
                    + "sub_category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = DBQueryEngine.getIDofSelectedValue("category", "category", "id", rs.getString(2));
                String subcateg = rs.getString(3);
                String status;
                if (rs.getString(4).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, category, subcateg, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadSelectedCtegory() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_Category.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "category.id,\n"
                    + "category.category,\n"
                    + "category.`status`\n"
                    + "FROM\n"
                    + "category\n where category.category like '" + txtName.getText().trim() + "%' "
                    + "ORDER BY\n"
                    + "category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String status;
                if (rs.getString(3).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, name, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {

            e.printStackTrace();
        }

    }

    private void loadByStatustoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_Category.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "category.id,\n"
                    + "category.category,\n"
                    + "category.`status`\n"
                    + "FROM\n"
                    + "category\n where category.`status`='" + ConstantData.getStatusID(cmbStatus) + "'"
                    + "ORDER BY\n"
                    + "category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String status;
                if (rs.getString(3).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, name, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {

            e.printStackTrace();
        }

    }

    private void loadSubCategoryByStatustoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblsubcat.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "sub_category.id,\n"
                    + "sub_category.category_id,\n"
                    + "sub_category.sub_category,\n"
                    + "sub_category.`status`\n"
                    + "FROM\n"
                    + "category ,\n"
                    + "sub_category\n"
                    + "WHERE\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "sub_category.`status`='" + ConstantData.getStatusID(cmbsubcatstatus) + "' \n"
                    + "ORDER BY\n"
                    + "sub_category.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = DBQueryEngine.getIDofSelectedValue("category", "category", "id", rs.getString(2));
                String subcateg = rs.getString(3);
                String status;
                if (rs.getString(4).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, category, subcateg, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
