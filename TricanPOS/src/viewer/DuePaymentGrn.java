/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.ConstantData;
import com.DBQueryEngine;
import com.DateUp;
import com.Empty;
import com.Format;
import com.Messages;
import com.Validation;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.DB;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class DuePaymentGrn extends javax.swing.JDialog {

    String mainsupplierid;
    String grnid;

    boolean singlemode = false;
    ViewGrnDetails grndetail;

    /**
     *
     * Creates new form duepaymentgrn
     */
    public DuePaymentGrn(java.awt.Frame parent, boolean modal, String grnid, String grnno, String supplierid, ViewGrnDetails grndetail) {
        super(parent, modal);
        initComponents();
        this.grnid = grnid;

        this.grndetail = grndetail;
        this.mainsupplierid = supplierid;
        singlemode = false;
        txtgrnid.setText(grnid);
        txtgrnno.setText(grnno);
        firstLoad();
    }

    public DuePaymentGrn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        singlemode = true;
        firstloadout();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtcardamount = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lblbalance = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lbldueamount = new javax.swing.JLabel();
        lblcashpay = new javax.swing.JLabel();
        txtcashamount = new javax.swing.JTextField();
        btnclear = new javax.swing.JButton();
        btnsubmit = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        lblpaid = new javax.swing.JLabel();
        lblgrandamount = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblfname = new javax.swing.JLabel();
        txtfirstname = new javax.swing.JTextField();
        lbllastname = new javax.swing.JLabel();
        txtlastname = new javax.swing.JTextField();
        lblnic = new javax.swing.JLabel();
        lblcontact1 = new javax.swing.JLabel();
        lblcompany = new javax.swing.JLabel();
        lblid = new javax.swing.JLabel();
        txtsupid = new javax.swing.JTextField();
        txtfcontact1 = new javax.swing.JFormattedTextField();
        txtnic = new javax.swing.JTextField();
        txtcompany = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblbuzman = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblpaid = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        lblitemcount = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lblbankname = new javax.swing.JLabel();
        cmbbankname = new javax.swing.JComboBox();
        lblchequenum = new javax.swing.JLabel();
        txtchequeno = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtbankcode = new javax.swing.JTextField();
        lblchequedate = new javax.swing.JLabel();
        txtfchequedate = new javax.swing.JFormattedTextField();
        lblchequeamount = new javax.swing.JLabel();
        txtchequeamount = new javax.swing.JTextField();
        lblchequdetails = new javax.swing.JLabel();
        cmbchequedetails = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblcheque = new javax.swing.JTable();
        btncheque = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblchequenetamount = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtgrnid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtgrnno = new javax.swing.JTextField();
        lblpaymentmethod = new javax.swing.JLabel();
        cmbpaymethod = new javax.swing.JComboBox();
        lbldate = new javax.swing.JLabel();
        txtfDate = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Card Payment"));

        jLabel6.setText("Card Amount Rs.");

        txtcardamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtcardamount.setText("0.0");
        txtcardamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcardamountActionPerformed(evt);
            }
        });
        txtcardamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcardamountKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(txtcardamount, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcardamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cash Payment & Summary"));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Due Amount Rs.");

        jLabel17.setText("Balance Amount Rs.");

        lblbalance.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblbalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblbalance.setText("0.0");

        jLabel19.setText("Due Amount Rs.");

        lbldueamount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbldueamount.setForeground(new java.awt.Color(255, 51, 51));
        lbldueamount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbldueamount.setText("0.0");

        lblcashpay.setText("Cash Amount Rs.");

        txtcashamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtcashamount.setText("0.0");
        txtcashamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcashamountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcashamountKeyReleased(evt);
            }
        });

        btnclear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnclear.setText("Reset");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        btnsubmit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnsubmit.setText("Submit");
        btnsubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubmitActionPerformed(evt);
            }
        });

        jLabel18.setText("Pay Amount Rs.");

        lblpaid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblpaid.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblpaid.setText("0.0");

        lblgrandamount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblgrandamount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblgrandamount.setText("0.0");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(lblcashpay)
                        .addGap(31, 31, 31)
                        .addComponent(txtcashamount))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(lblpaid, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel18)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbldueamount, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(lblbalance, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(btnsubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(lblgrandamount, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(46, 46, 46))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(lblgrandamount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnclear)
                            .addComponent(btnsubmit)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblcashpay)
                            .addComponent(txtcashamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(lblpaid))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(lblbalance))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(lbldueamount))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Supplier Details"));

        lblfname.setText("First Name*");

        txtfirstname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtfirstnameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfirstnameKeyReleased(evt);
            }
        });

        lbllastname.setText("Last Name*");

        txtlastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtlastnameKeyPressed(evt);
            }
        });

        lblnic.setText("NIC");

        lblcontact1.setText("Contact No 1*");

        lblcompany.setText("Company");

        lblid.setText("ID");

        txtsupid.setEditable(false);

        try {
            txtfcontact1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfcontact1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtfcontact1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfcontact1KeyReleased(evt);
            }
        });

        txtnic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtnicKeyPressed(evt);
            }
        });

        txtcompany.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcompanyKeyReleased(evt);
            }
        });

        tblbuzman.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Contact 1", "Company"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblbuzman.getTableHeader().setReorderingAllowed(false);
        tblbuzman.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblbuzmanMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblbuzman);
        if (tblbuzman.getColumnModel().getColumnCount() > 0) {
            tblbuzman.getColumnModel().getColumn(0).setPreferredWidth(0);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblid)
                            .addComponent(lbllastname)
                            .addComponent(lblfname))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtlastname)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtfirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtsupid, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 42, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblcontact1)
                            .addComponent(lblnic)
                            .addComponent(lblcompany))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtcompany, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtfcontact1)
                                .addComponent(txtnic, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblid)
                    .addComponent(txtsupid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblfname)
                    .addComponent(txtfirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbllastname)
                    .addComponent(txtlastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblcontact1)
                        .addGap(27, 27, 27)
                        .addComponent(lblnic))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtfcontact1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtnic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtcompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblcompany))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Payment History"));

        tblpaid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN ID", "GRN No", "Supplier", "Date", "Bill Amount", "Paid Amount", "Due Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblpaid.getTableHeader().setReorderingAllowed(false);
        tblpaid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblpaidMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblpaid);
        if (tblpaid.getColumnModel().getColumnCount() > 0) {
            tblpaid.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblpaid.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        jLabel8.setText("Items");

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblitemcount.setText("0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblitemcount))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cheque Payment"));

        lblbankname.setText("Bank Name*");

        cmbbankname.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "BOC", "Sampath", "HNB", "Commercial", "Nation Trust" }));
        cmbbankname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbanknameActionPerformed(evt);
            }
        });
        cmbbankname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbbanknameKeyPressed(evt);
            }
        });

        lblchequenum.setText("Cheque No*");

        txtchequeno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtchequenoKeyPressed(evt);
            }
        });

        jLabel12.setText("Bank Code");

        txtbankcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbankcodeKeyPressed(evt);
            }
        });

        lblchequedate.setText("Cheque Date*");

        try {
            txtfchequedate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfchequedate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtfchequedateKeyPressed(evt);
            }
        });

        lblchequeamount.setText("Amount Rs.*");

        txtchequeamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtchequeamount.setText("0.0");
        txtchequeamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtchequeamountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtchequeamountKeyReleased(evt);
            }
        });

        lblchequdetails.setText("Details*");

        cmbchequedetails.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Cash Cheque", "Date Cheque", "Cross Cheque" }));
        cmbchequedetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbchequedetailsKeyPressed(evt);
            }
        });

        tblcheque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bank Name", "Cheque No", "Bank Code", "Cheque Date", "Details", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblcheque.getTableHeader().setReorderingAllowed(false);
        tblcheque.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblchequeMouseClicked(evt);
            }
        });
        tblcheque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblchequeKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblcheque);

        btncheque.setText("Apply");
        btncheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchequeActionPerformed(evt);
            }
        });

        jLabel3.setText("Net Amount Rs.");

        lblchequenetamount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblchequenetamount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblchequenetamount.setText("0.0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblchequedate)
                            .addComponent(jLabel12)
                            .addComponent(lblchequeamount)
                            .addComponent(lblchequdetails))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtchequeamount)
                            .addComponent(txtbankcode)
                            .addComponent(txtfchequedate)
                            .addComponent(cmbchequedetails, 0, 129, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btncheque, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(34, 34, 34)
                                .addComponent(lblchequenetamount, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblbankname)
                                        .addComponent(lblchequenum))
                                    .addGap(20, 20, 20)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbbankname, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtchequeno, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblbankname)
                    .addComponent(cmbbankname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblchequenum)
                    .addComponent(txtchequeno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtbankcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblchequedate)
                    .addComponent(txtfchequedate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblchequdetails)
                    .addComponent(cmbchequedetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtchequeamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblchequeamount)
                    .addComponent(btncheque))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblchequenetamount))
                .addGap(20, 20, 20))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("GRN ID");

        txtgrnid.setEditable(false);
        txtgrnid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgrnidActionPerformed(evt);
            }
        });

        jLabel5.setText("GRN No");

        txtgrnno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgrnnoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtgrnnoKeyReleased(evt);
            }
        });

        lblpaymentmethod.setText("Payment Method");

        cmbpaymethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Cash Only", "Cheque Only", "Card Payment Only", "Multiple Payment" }));
        cmbpaymethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbpaymethodActionPerformed(evt);
            }
        });
        cmbpaymethod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbpaymethodKeyPressed(evt);
            }
        });

        lbldate.setText("Date");

        try {
            txtfDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtfDateKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtgrnid, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(txtgrnno, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(lblpaymentmethod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbpaymethod, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbldate)
                .addGap(18, 18, 18)
                .addComponent(txtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(txtgrnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtgrnid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblpaymentmethod)
                    .addComponent(cmbpaymethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbldate)
                    .addComponent(txtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GRN Credit Payment");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1249, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbpaymethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbpaymethodActionPerformed
        if (cmbpaymethod.getSelectedIndex() != 0) {
            feildsEnable();
            AllFinalCalculations();
        }
    }//GEN-LAST:event_cmbpaymethodActionPerformed

    private void cmbpaymethodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbpaymethodKeyPressed
        if (evt.getKeyCode() == 10) {
            txtfDate.grabFocus();

        }
    }//GEN-LAST:event_cmbpaymethodKeyPressed

    private void txtfDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDateKeyPressed
        if (evt.getKeyCode() == 10) {
            txtfirstname.grabFocus();

        }
    }//GEN-LAST:event_txtfDateKeyPressed

    private void txtcashamountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcashamountKeyPressed
        if (evt.getKeyCode() == 10) {
            btnsubmit.grabFocus();

        }
    }//GEN-LAST:event_txtcashamountKeyPressed

    private void txtcashamountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcashamountKeyReleased
        Validation.validatedouble(txtcashamount);
        if (!txtcashamount.getText().isEmpty()) {
            if (cmbpaymethod.getSelectedIndex() != 0) {
                AllFinalCalculations();
            } else {
                cmbpaymethod.grabFocus();
            }

        } else {
            clearCashamount();
            AllFinalCalculations();
        }
    }//GEN-LAST:event_txtcashamountKeyReleased

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        clearAll();
    }//GEN-LAST:event_btnclearActionPerformed

    private void btnsubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubmitActionPerformed

        if (Double.parseDouble(lblgrandamount.getText().trim()) > 0 && !txtsupid.getText().isEmpty() && !txtgrnid.getText().isEmpty()) {

            if (Empty.ComboBox(cmbpaymethod, Empty.Text + lblpaymentmethod.getText())) {

            } else if (Empty.DateFormatedFeild(txtfDate, Empty.Text + lbldate.getText())) {
            } else if (Empty.TxtFieldEmpty(txtfirstname, Empty.Text + lblfname.getText())) {
            } else if (Empty.TxtFieldEmpty(txtlastname, Empty.Text + lbllastname.getText())) {
            } else if (Empty.ContactNumberFormatedFeild(txtfcontact1, Empty.Text + lblcontact1.getText())) {
                //  } else if (Empty.TxtFieldEmpty(txtcompany, Empty.Text + lblcompany.getText())) {

            } else if (cmbpaymethod.getSelectedIndex() == 2) {// cheque

                if (tblcheque.getRowCount() != 0 && Double.parseDouble(lblchequenetamount.getText()) > 0) {
                    SavePayment();
                } else {
                    Messages.warningjoption("Please Enter Cheque Details ! ");
                }

//   
            } else if (cmbpaymethod.getSelectedIndex() == 1) {// cash
                if (Double.parseDouble(txtcashamount.getText()) > 0) {
                    SavePayment();
                } else {
                    Messages.warningjoption("Please Enter Cash Amount ! ");
                }
            } else if (cmbpaymethod.getSelectedIndex() == 3) {// card
                if (Double.parseDouble(txtcardamount.getText()) > 0) {
                    SavePayment();
                } else {
                    Messages.warningjoption("Please Enter Card Amount ! ");
                }

            } else if (cmbpaymethod.getSelectedIndex() == 4) { // multiple

                if (Double.parseDouble(lblpaid.getText()) > 0) {
                    SavePayment();
                } else {
                    Messages.warningjoption("Please Increase Pay Amount ! ");
                }
            }

        }
    }//GEN-LAST:event_btnsubmitActionPerformed

    private void cmbbanknameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbbanknameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtchequeno.grabFocus();

        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {

            txtcashamount.grabFocus();
            txtcashamount.selectAll();
        }
    }//GEN-LAST:event_cmbbanknameKeyPressed

    private void txtchequenoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtchequenoKeyPressed
        if (evt.getKeyCode() == 10) {
            txtbankcode.grabFocus();

        }
    }//GEN-LAST:event_txtchequenoKeyPressed

    private void txtbankcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbankcodeKeyPressed
        if (evt.getKeyCode() == 10) {
            txtfchequedate.grabFocus();

        }
    }//GEN-LAST:event_txtbankcodeKeyPressed

    private void txtfchequedateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfchequedateKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbchequedetails.grabFocus();

        }
    }//GEN-LAST:event_txtfchequedateKeyPressed

    private void txtchequeamountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtchequeamountKeyPressed
        if (evt.getKeyCode() == 10) {
            btncheque.grabFocus();

        }
    }//GEN-LAST:event_txtchequeamountKeyPressed

    private void txtchequeamountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtchequeamountKeyReleased
        Validation.validatedouble(txtchequeamount);
    }//GEN-LAST:event_txtchequeamountKeyReleased

    private void cmbchequedetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbchequedetailsKeyPressed
        if (evt.getKeyCode() == 10) {
            txtchequeamount.grabFocus();
            txtchequeamount.selectAll();

        }
    }//GEN-LAST:event_cmbchequedetailsKeyPressed

    private void tblchequeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblchequeMouseClicked

        if (tblcheque.getRowCount() != 0) {
            if (evt.getClickCount() == 2) {
                LoadChequeDetailsintoFeilds();
                AllFinalCalculations();
            }

        }

    }//GEN-LAST:event_tblchequeMouseClicked

    private void tblchequeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblchequeKeyPressed
        if (tblcheque.getRowCount() != 0) {
            if (evt.getKeyCode() == 127) {
                DeleteCheque();
                AllFinalCalculations();
            }
        }
    }//GEN-LAST:event_tblchequeKeyPressed

    private void btnchequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchequeActionPerformed
        if (Empty.ComboBox(cmbbankname, Empty.Text + lblbankname.getText())) {
        } else if (Empty.TxtFieldEmpty(txtchequeno, Empty.Text + lblchequenum.getText())) {
        } else if (Empty.DateFormatedFeild(txtfchequedate, Empty.Text + lblchequedate.getText())) {
        } else if (Empty.ComboBox(cmbchequedetails, Empty.Text + lblchequdetails.getText())) {
        } else if (Empty.TxtFieldEmpty(txtchequeamount, Empty.Text + lblchequeamount.getText())) {
        } else if (cmbpaymethod.getSelectedIndex() == 0) {
            cmbpaymethod.grabFocus();
        } else if (isnotAvilablethisCheque()) {
            if (Double.parseDouble(txtchequeamount.getText()) > 0) {
                addChequeDetailstoTable();
            }

        }
    }//GEN-LAST:event_btnchequeActionPerformed

    private void txtfirstnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfirstnameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtlastname.grabFocus();

        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {
            txtcashamount.grabFocus();
            txtcashamount.selectAll();
        }
    }//GEN-LAST:event_txtfirstnameKeyPressed

    private void txtfirstnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfirstnameKeyReleased

        if (!txtfirstname.getText().isEmpty()) {
            loadSupplierbyFirstName();
        } else {
            clearAllFields();
            txtfirstname.grabFocus();
        }

    }//GEN-LAST:event_txtfirstnameKeyReleased

    private void txtlastnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtlastnameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtnic.grabFocus();

        }
    }//GEN-LAST:event_txtlastnameKeyPressed

    private void txtfcontact1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfcontact1KeyPressed
        if (evt.getKeyCode() == 10) {
            txtcompany.grabFocus();
        }
    }//GEN-LAST:event_txtfcontact1KeyPressed

    private void txtfcontact1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfcontact1KeyReleased

    }//GEN-LAST:event_txtfcontact1KeyReleased

    private void txtnicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnicKeyPressed
        if (evt.getKeyCode() == 10) {
            txtfcontact1.grabFocus();
        }
    }//GEN-LAST:event_txtnicKeyPressed

    private void txtcompanyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcompanyKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            txtcashamount.grabFocus();
            txtcashamount.selectAll();
        }
    }//GEN-LAST:event_txtcompanyKeyReleased

    private void tblbuzmanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblbuzmanMouseClicked
        if (evt.getClickCount() == 2) {

            if (tblbuzman.getRowCount() != 0) {
                setBuzmantoFields();
                if (singlemode) {
                    loadSupplierCreditHistory(tblbuzman.getValueAt(tblbuzman.getSelectedRow(), 0).toString());
                }
                txtfirstname.grabFocus();
            }
        }
    }//GEN-LAST:event_tblbuzmanMouseClicked

    private void cmbbanknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbanknameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbbanknameActionPerformed

    private void txtgrnnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgrnnoKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbpaymethod.grabFocus();
        }
    }//GEN-LAST:event_txtgrnnoKeyPressed

    private void txtgrnnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgrnnoKeyReleased
        if (!txtgrnno.getText().isEmpty()) {
            loadHistorybyGRNno();

        } else {
            clearAllFields();
        }
    }//GEN-LAST:event_txtgrnnoKeyReleased

    private void tblpaidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblpaidMouseClicked
        if (singlemode) {
            if (evt.getClickCount() == 2) {
                if (tblpaid.getRowCount() != 0) {
                    LoadPayments(tblpaid.getValueAt(tblpaid.getSelectedRow(), 0).toString());
                    txtgrnid.setText(tblpaid.getValueAt(tblpaid.getSelectedRow(), 0).toString());
                    txtgrnno.setText(tblpaid.getValueAt(tblpaid.getSelectedRow(), 1).toString());
                    AllFinalCalculations();
                }
            }
        }
    }//GEN-LAST:event_tblpaidMouseClicked

    private void txtgrnidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgrnidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgrnidActionPerformed

    private void txtcardamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcardamountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcardamountActionPerformed

    private void txtcardamountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcardamountKeyReleased
        Validation.validatedouble(txtcardamount);

        if (!txtcardamount.getText().isEmpty()) {
            if (cmbpaymethod.getSelectedIndex() != 0) {
                AllFinalCalculations();
            } else {
                cmbpaymethod.grabFocus();
            }

        } else {
            clearCardamount();
            AllFinalCalculations();
        }
    }//GEN-LAST:event_txtcardamountKeyReleased
    private void setBuzmantoFields() {

        txtsupid.setText(tblbuzman.getValueAt(tblbuzman.getSelectedRow(), 0).toString());
        txtfirstname.setText(tblbuzman.getValueAt(tblbuzman.getSelectedRow(), 1).toString().split("_")[0]);
        txtlastname.setText(tblbuzman.getValueAt(tblbuzman.getSelectedRow(), 1).toString().split("_")[1]);
        txtfcontact1.setText(tblbuzman.getValueAt(tblbuzman.getSelectedRow(), 2).toString());
        txtcompany.setText(tblbuzman.getValueAt(tblbuzman.getSelectedRow(), 3).toString());

    }

    private void loadSupplierbyFirstName() {
        try {
            DefaultTableModel tb = (DefaultTableModel) tblbuzman.getModel();
            tb.setRowCount(0);

            ResultSet rs = DB.getData("SELECT\n"
                    + "buz_man.id,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "buz_man.company\n"
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "buz_man.`status` = '1' AND\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Supplier' AND\n"
                    + "buz_man.fname  like '" + txtfirstname.getText().trim() + "%'");
            while (rs.next()) {

                String id = rs.getString(1);
                String name = rs.getString(2) + "_" + rs.getString(3);
                String contac = rs.getString(4);
                String company = rs.getString(5);

                Object arr[] = {id, name, contac, company};
                tb.addRow(arr);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DuePaymentGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DuePaymentGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DuePaymentGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DuePaymentGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DuePaymentGrn dialog = new DuePaymentGrn(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncheque;
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btnsubmit;
    private javax.swing.JComboBox cmbbankname;
    private javax.swing.JComboBox cmbchequedetails;
    private javax.swing.JComboBox cmbpaymethod;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblbalance;
    private javax.swing.JLabel lblbankname;
    private javax.swing.JLabel lblcashpay;
    private javax.swing.JLabel lblchequdetails;
    private javax.swing.JLabel lblchequeamount;
    private javax.swing.JLabel lblchequedate;
    private javax.swing.JLabel lblchequenetamount;
    private javax.swing.JLabel lblchequenum;
    private javax.swing.JLabel lblcompany;
    private javax.swing.JLabel lblcontact1;
    private javax.swing.JLabel lbldate;
    private javax.swing.JLabel lbldueamount;
    private javax.swing.JLabel lblfname;
    public javax.swing.JLabel lblgrandamount;
    private javax.swing.JLabel lblid;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JLabel lbllastname;
    private javax.swing.JLabel lblnic;
    private javax.swing.JLabel lblpaid;
    private javax.swing.JLabel lblpaymentmethod;
    private javax.swing.JTable tblbuzman;
    private javax.swing.JTable tblcheque;
    private javax.swing.JTable tblpaid;
    private javax.swing.JTextField txtbankcode;
    private javax.swing.JTextField txtcardamount;
    private javax.swing.JTextField txtcashamount;
    private javax.swing.JTextField txtchequeamount;
    private javax.swing.JTextField txtchequeno;
    public javax.swing.JTextField txtcompany;
    private javax.swing.JFormattedTextField txtfDate;
    private javax.swing.JFormattedTextField txtfchequedate;
    public javax.swing.JFormattedTextField txtfcontact1;
    public javax.swing.JTextField txtfirstname;
    private javax.swing.JTextField txtgrnid;
    private javax.swing.JTextField txtgrnno;
    public javax.swing.JTextField txtlastname;
    public javax.swing.JTextField txtnic;
    public javax.swing.JTextField txtsupid;
    // End of variables declaration//GEN-END:variables
  private void firstLoad() {
        txtfDate.setValue(new DateUp().getCurrentDate());
        txtfirstname.setEnabled(false);
        txtlastname.setEnabled(false);
        txtnic.setEnabled(false);
        txtfcontact1.setEnabled(false);
        txtcompany.setEnabled(false);
        txtgrnno.setEnabled(false);
        LoadBuzman();
        loadPayHistorybyGrnid();
        LoadPayments(txtgrnid.getText().trim());
        cmbpaymethod.grabFocus();
        btnclear.setText("Close");
    }

    private void feildsEnable() {
//        if (cmbpaymethod.getSelectedIndex() == 1) {//credit only
//            btncheque.setEnabled(false);
//            txtcashamount.setEditable(false);
//            txtcardamount.setEditable(false);
//            lblchequenetamount.setText("0.0");
//            txtcashamount.setText("0.0");
//            txtcardamount.setText("0.0");
//            DefaultTableModel tbl = (DefaultTableModel) tblcheque.getModel();
//            tbl.setRowCount(0);
//
//            lbldueamount.setText(lblgrandamount.getText().trim());
//
//        } else 

        if (cmbpaymethod.getSelectedIndex() == 1) { // cash payment
            btncheque.setEnabled(false);
            txtcashamount.setEditable(true);
            txtcardamount.setEditable(false);
            txtcashamount.setText("0.0");
            txtcardamount.setText("0.0");
            DefaultTableModel tbl = (DefaultTableModel) tblcheque.getModel();
            tbl.setRowCount(0);
        } else if (cmbpaymethod.getSelectedIndex() == 2) { // cheque only
            btncheque.setEnabled(true);
            txtcashamount.setEditable(false);
            txtcardamount.setEditable(false);
            txtcashamount.setText("0.0");
            txtcardamount.setText("0.0");

        } else if (cmbpaymethod.getSelectedIndex() == 3) { // card only
            btncheque.setEnabled(false);
            txtcashamount.setEditable(false);
            txtcardamount.setEditable(true);
            txtcashamount.setText("0.0");
            txtcardamount.setText("0.0");
            DefaultTableModel tbl = (DefaultTableModel) tblcheque.getModel();
            tbl.setRowCount(0);
        } else if (cmbpaymethod.getSelectedIndex() == 4) { // mutiple
            btncheque.setEnabled(true);
            txtcashamount.setEditable(true);
            txtcardamount.setEditable(true);
            txtcashamount.setText("0.0");
            txtcardamount.setText("0.0");
            DefaultTableModel tbl = (DefaultTableModel) tblcheque.getModel();
            tbl.setRowCount(0);
        }

    }

    public void LoadBuzman() {
        try {
            if (!mainsupplierid.isEmpty()) {
                ResultSet rs = DB.getData("SELECT\n"
                        + "buz_man.fname,\n"
                        + "buz_man.lname,\n"
                        + "buz_man.nic,\n"
                        + "buz_man.contact_1,\n"
                        + "buz_man.company,"
                        + "buz_man.status\n"
                        + "FROM\n"
                        + "buz_man\n"
                        + "WHERE\n"
                        + "buz_man.id = '" + mainsupplierid + "' \n"
                        + "");
                if (rs.next()) {

                    if (rs.getInt(6) == 1) {
                        txtsupid.setText(mainsupplierid);
                        txtfirstname.setText(rs.getString(1));
                        txtlastname.setText(rs.getString(2));

                        txtfcontact1.setValue(rs.getString(4));
                        txtcompany.setText(rs.getString(5));

                    } else {

                        Messages.errorjoption("This Main Supplier Currently not Available ,Please Check ! ");
                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

//    private void clearMainSupplier() {
//        try {
//            txtsupid.setText("");
//            txtfirstname.setText("");
//            txtlastname.setText("");
//            
//            txtfcontact1.setValue("");
//            
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        
//    }
    private void clearSupplierAll() {
        try {
            txtsupid.setText("");
            txtfirstname.setText("");
            txtlastname.setText("");
            txtnic.setText("");
            txtfcontact1.setValue("");
            txtcompany.setText("");
            DefaultTableModel tbl = (DefaultTableModel) tblbuzman.getModel();
            tbl.setRowCount(0);
            txtfirstname.grabFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

//    private void addSupplierDetailstoTable() {
//        try {
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//    }
    private void LoadSupplierfromContact1() {

        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "sec_buzmen.id,\n"
                    + "sec_buzmen.fname,\n"
                    + "sec_buzmen.lname,\n"
                    + "sec_buzmen.nic,\n"
                    + "\n"
                    + "sec_buzmen.contact2\n"
                    + "FROM\n"
                    + "sec_buzmen ,\n"
                    + "buz_man\n"
                    + "WHERE\n"
                    + "\n"
                    + "sec_buzmen.`status` = '1' AND\n"
                    + "sec_buzmen.buz_man_id = '" + mainsupplierid + "' AND\n"
                    + "sec_buzmen.buz_man_id = buz_man.id AND\n"
                    + "buz_man.`status` = '1' AND sec_buzmen.type = 'GRN Supplier' and \n"
                    + "sec_buzmen.contact1 LIKE '" + txtfcontact1.getText() + "%'");
            if (rs.next()) {

                txtsupid.setText(rs.getString(1));
                txtfirstname.setText(rs.getString(2));
                txtlastname.setText(rs.getString(3));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void addChequeDetailstoTable() {
        try {
            DefaultTableModel tb = (DefaultTableModel) tblcheque.getModel();

            String bank = cmbbankname.getSelectedItem().toString();
            String chequeno = txtchequeno.getText();
            String bnckcode = txtbankcode.getText();
            String chequedate = txtfchequedate.getText();
            String chequedetaisl = cmbchequedetails.getSelectedItem().toString();
            String chequeamount = txtchequeamount.getText();

            Object arr[] = {bank, chequeno, bnckcode, chequedate, chequedetaisl, chequeamount};

            tb.addRow(arr);

            CalculationChequeAmount();
            AllFinalCalculations();
            clearChequeDetails();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private double CalculationChequeAmount() {
        double cheamount = 0.0;
        try {
            if (tblcheque.getRowCount() != 0) {

                for (int i = 0; i < tblcheque.getRowCount(); i++) {

                    cheamount += Double.parseDouble(tblcheque.getValueAt(i, 5).toString());

                }

            }
            lblchequenetamount.setText(Format.decimal3.format(cheamount));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cheamount;
    }

    private void DeleteCheque() {
        try {
            DefaultTableModel tb = (DefaultTableModel) tblcheque.getModel();
            tb.removeRow(tblcheque.getSelectedRow());
            CalculationChequeAmount();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void LoadChequeDetailsintoFeilds() {
        try {

            cmbbankname.setSelectedItem(tblcheque.getValueAt(tblcheque.getSelectedRow(), 0));
            txtchequeno.setText(tblcheque.getValueAt(tblcheque.getSelectedRow(), 1).toString());
            txtbankcode.setText(tblcheque.getValueAt(tblcheque.getSelectedRow(), 2).toString());
            txtfchequedate.setValue(tblcheque.getValueAt(tblcheque.getSelectedRow(), 3).toString());
            cmbchequedetails.setSelectedItem(tblcheque.getValueAt(tblcheque.getSelectedRow(), 4).toString());
            txtchequeamount.setText(tblcheque.getValueAt(tblcheque.getSelectedRow(), 5).toString());
            DeleteCheque();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private boolean isnotAvilablethisCheque() {
        boolean bol = true;
        try {
            DefaultTableModel dft = (DefaultTableModel) tblcheque.getModel();

            for (int i = 0; i < tblcheque.getRowCount(); i++) {
                String bnkname = cmbbankname.getSelectedItem().toString();
                String cheaqno = txtchequeno.getText();

                if (bnkname.equals(tblcheque.getValueAt(i, 0)) && cheaqno.equals(tblcheque.getValueAt(i, 1))) {
                    Messages.warningjoption("This Cheque Already Exist in the Table. Please Check ! ");
                    bol = false;
                    break;
                } else {
                    bol = true;
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return bol;
    }

    private void clearChequeDetails() {
        txtchequeno.setText("");
        txtbankcode.setText("");
        txtfchequedate.setValue("");
        txtchequeamount.setText("0.0");
        cmbbankname.setSelectedIndex(0);

        cmbchequedetails.setSelectedIndex(0);
        cmbbankname.grabFocus();
    }

    public void AllFinalCalculations() {
        try {
            double grandamount = Double.valueOf(lblgrandamount.getText());

            if (grandamount > 0) {

                double chequeamount = 0.0;
                if (tblcheque.getRowCount() != 0) {
                    chequeamount = Double.valueOf(lblchequenetamount.getText());
                }

                double cash = Double.valueOf(txtcashamount.getText());
                double CArd = Double.valueOf(txtcardamount.getText());

                if (cmbpaymethod.getSelectedIndex() == 1) { // cash only

                    lblpaid.setText(String.valueOf(cash));
                    double last = grandamount - cash;
                    if (last > 0) { // due
                        lbldueamount.setText(String.valueOf(Format.decimal3.format(last)));
                        lblbalance.setText("0.0");
                    } else { //balance
                        double bal = cash - grandamount;
                        lblbalance.setText(String.valueOf(bal));
                        lbldueamount.setText("0.0");
                    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } else if (cmbpaymethod.getSelectedIndex() == 2) { //  cheque only

                    lblpaid.setText(String.valueOf(chequeamount));
                    double last = grandamount - chequeamount;
                    if (last > 0) { // due
                        lbldueamount.setText(String.valueOf(Format.decimal3.format(last)));
                        lblbalance.setText("0.0");
                    } else { //balance
                        double bal = chequeamount - grandamount;
                        lblbalance.setText(String.valueOf(Format.decimal3.format(bal)));
                        lbldueamount.setText("0.0");
                    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } else if (cmbpaymethod.getSelectedIndex() == 3) { // card only

                    lblpaid.setText(String.valueOf(CArd));
                    double last = grandamount - CArd;
                    if (last > 0) { // due
                        lbldueamount.setText(String.valueOf(Format.decimal3.format(last)));
                        lblbalance.setText("0.0");
                    } else { //balance
                        double bal = CArd - grandamount;
                        lblbalance.setText(String.valueOf(bal));
                        lbldueamount.setText("0.0");
                    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } else if (cmbpaymethod.getSelectedIndex() == 4) { // multiple
                    double tot = cash + chequeamount + CArd;
//
                    lblpaid.setText(String.valueOf(tot));
                    double last = grandamount - tot;
                    if (last > 0) { // due
                        lbldueamount.setText(String.valueOf(Format.decimal3.format(last)));
                        lblbalance.setText("0.0");
                    } else { //balance
                        double bal = tot - grandamount;
                        lblbalance.setText(String.valueOf(Format.decimal3.format(bal)));
                        lbldueamount.setText("0.0");
                    }
                } else {
                    lblpaid.setText("0.0");
                    lblbalance.setText("0.0");
                    lbldueamount.setText("0.0");
                    txtcashamount.setText("0.0");
                    txtcardamount.setText("0.0");
                    lblchequenetamount.setText("0.0");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void clearCashamount() {

        lblpaid.setText("0.0");
        lblbalance.setText("0.0");
        lbldueamount.setText("0.0");
       // lblgrandamount.setText("0.0");
        txtcashamount.setText("0.0");
        txtcashamount.selectAll();

    }

    private void clearAll() {

        if (singlemode) {
            int part = JOptionPane.showConfirmDialog(null, "Are you sure you want Clear All Details ? ", "Message", 0, 0);

            if (part == JOptionPane.YES_OPTION) {
                dispose();
                new DuePaymentGrn(ConstantData.home, false).setVisible(true);

            }
        } else {

            int part = JOptionPane.showConfirmDialog(null, "Are you sure you want Clear All Details ? ", "Message", 0, 0);

            if (part == JOptionPane.YES_OPTION) {
                dispose();
//                new ViewGrnDetails(ConstantData.home, false, grnid,grnno,,grndetail).setVisible(true);

            }
        }
    }

    //<editor-fold defaultstate="collapsed" desc="comment">
    public void SavePayment() {

        Connection conn = null;

        try {
            conn = model.DB2.getconn();

            String paymentregid = getPaymentRegid(txtgrnid.getText().trim());//get grn payment reg id

            String datetime = txtfDate.getText().trim() + " " + DateUp.getCurrentTime();
            double dueamunt = Double.parseDouble(lbldueamount.getText());
            String status = "";
            if (dueamunt > 0) {
                status = ConstantData.Status_PENDING;
            } else if (dueamunt == 0) {
                status = ConstantData.Status_COMPLETE;

                model.DB2.putData("update payment_reg set status='" + ConstantData.Status_COMPLETE + "'  where id='" + paymentregid + "' ");
            }

            String payerid = txtsupid.getText().trim();
            String payertype = "Supplier";

//            if (cmboption.getSelectedIndex() == 1) {//  default = mainsupplier
//                payerid = mainsupplierid;
//                payertype = "Default";
//            } else if (cmboption.getSelectedIndex() == 2) { // second supplier
//                payerid = txtsupid.getText().trim();
//                payertype = "Second Supplier";
//            } else if (cmboption.getSelectedIndex() == 3) { // new supplier
//                payerid = "";
//                payertype = "New";
//                String secsupplierid = DBQueryEngine.GetMaxID("sec_buzmen");
//
//                if (checkAlreadyExistSecondSuppler()) {
//                    ////save new second supplier
//                    model.DB2.putData("insert into sec_buzmen (id,buz_man_id,type,fname,lname,nic,contact1,contact2,status) "
//                            + " values ('" + secsupplierid + "','" + mainsupplierid + "','GRN Supplier',"
//                            + "'" + txtfirstname.getText().trim() + "','" + txtlastname.getText().trim() + "',"
//                            + "'" + txtfnic.getText().trim() + "','" + txtfcontact1.getText().trim() + "',"
//                            + "'" + txtfcontact2.getText().trim() + "','" + ConstantData.Status_ACTIVE + "')");
//                }
//
//            }
            String paymentrecid = DBQueryEngine.GetMaxID("payment_rec");
            ////////payment rec
            model.DB2.putData("insert into payment_rec (id,user_id,payment_reg_id,branch_id,date,paytype,payer_id,payer_type,paid,balance,due,status) "
                    + " values ('" + paymentrecid + "','" + ConstantData.logUserId + "',"
                    + "'" + paymentregid + "','" + ConstantData.branchId + "',"
                    + "Now(),'" + cmbpaymethod.getSelectedItem() + "',"
                    + "'" + payerid + "','" + payertype + "','" + lblpaid.getText() + "','" + lblbalance.getText() + "','" + lbldueamount.getText() + "',"
                    + "'" + ConstantData.Status_COMPLETE + "')"); // status 5

//            String cashid = DBQueryEngine.GetMaxID("cash");
//            int chequeid = DBQueryEngine.GetMaxIDInt("cheque_details");
            if (cmbpaymethod.getSelectedIndex() == 1) { // cash

                ////////cash payment
                model.DB2.putData("insert into cash (payment_rec_id,detail,total,status) "
                        + " values ('" + paymentrecid + "',"
                        + "'GRN Cash','" + txtcashamount.getText() + "',"
                        + "'" + ConstantData.Status_COMPLETE + "')");

            } else if (cmbpaymethod.getSelectedIndex() == 2) { // cheque

                for (int i = 0; i < tblcheque.getRowCount(); i++) {
                    ////////cheque payment
                    String bnk = tblcheque.getValueAt(i, 0).toString();
                    String chequeno = tblcheque.getValueAt(i, 1).toString();
                    String bnkcode = tblcheque.getValueAt(i, 2).toString();
                    String chequedate = tblcheque.getValueAt(i, 3).toString();
                    String details = tblcheque.getValueAt(i, 4).toString();
                    String total = tblcheque.getValueAt(i, 5).toString();

                    model.DB2.putData("insert into cheque_details (payment_rec_id,bank,chequeno,bankcode,cheque_date,details,total,status) "
                            + " values ('" + paymentrecid + "',"
                            + "'" + bnk + "','" + chequeno + "',"
                            + "'" + bnkcode + "','" + chequedate + "',"
                            + "'" + details + "','" + total + "',"
                            + "'" + ConstantData.Status_COMPLETE + "')");

                }

            } else if (cmbpaymethod.getSelectedIndex() == 4) { // multiple

                if (Double.parseDouble(txtcashamount.getText()) > 0) {// cash
                    ////////cash payment
                    model.DB2.putData("insert into cash (payment_rec_id,detail,total,status) "
                            + " values ('" + paymentrecid + "',"
                            + "'GRN Cash','" + txtcashamount.getText() + "',"
                            + "'" + ConstantData.Status_COMPLETE + "')");
                }

                if (Double.parseDouble(lblchequenetamount.getText()) > 0 && tblcheque.getRowCount() != 0) { // cheque
                    for (int i = 0; i < tblcheque.getRowCount(); i++) {
                        ////////cheque payment
                        String bnk = tblcheque.getValueAt(i, 0).toString();
                        String chequeno = tblcheque.getValueAt(i, 1).toString();
                        String bnkcode = tblcheque.getValueAt(i, 2).toString();
                        String chequedate = tblcheque.getValueAt(i, 3).toString();
                        String details = tblcheque.getValueAt(i, 4).toString();
                        String total = tblcheque.getValueAt(i, 5).toString();

                        model.DB2.putData("insert into cheque_details (payment_rec_id,bank,chequeno,bankcode,cheque_date,details,total,status) "
                                + " values ('" + paymentrecid + "',"
                                + "'" + bnk + "','" + chequeno + "',"
                                + "'" + bnkcode + "','" + chequedate + "',"
                                + "'" + details + "','" + total + "',"
                                + "'" + ConstantData.Status_COMPLETE + "')");

                    }
                }

                if (Double.parseDouble(txtcardamount.getText()) > 0) {
                    ////////card payment
                    model.DB2.putData("insert into card (payment_rec_id,detail,total,status) "
                            + " values ('" + paymentrecid + "',"
                            + "'GRN Card Payment','" + txtcardamount.getText() + "',"
                            + "'" + ConstantData.Status_COMPLETE + "')");
                }

            } else if (cmbpaymethod.getSelectedIndex() == 3) { // card payment

                ////////card payment
                model.DB2.putData("insert into card (payment_rec_id,detail,total,status) "
                        + " values ('" + paymentrecid + "',"
                        + "'GRN Card Payment','" + txtcashamount.getText() + "',"
                        + "'" + ConstantData.Status_COMPLETE + "')");

            }

            if (dueamunt > 0) { // all credit payments till credit due have
                // String creditid = DBQueryEngine.GetMaxID("credit");
                ////////credit payment
                model.DB2.putData("insert into credit (payment_rec_id,date,paid,rem_tot,status) "
                        + " values ('" + paymentrecid + "',"
                        + "Now(),'" + lblpaid.getText() + "','" + lbldueamount.getText() + "',"
                        + "'" + ConstantData.Status_COMPLETE + "')");

            }

            if (conn != null) {
                conn.commit();
                Messages.normaljoption("GRN Credit Payment Saved Successfully ! ");

                if (grndetail != null) {
                    grndetail.LoadGRNDetails();
                }

                if (singlemode) {
                    clearAllFields();
                } else {
                    dispose();
                }

            }

        } catch (Exception e) {
            Messages.warningjoption("OOoppzz ,Somthing wrong this Saving Process,Plaese Try again !");
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }
//</editor-fold>

//    private boolean checkAlreadyExistSecondSuppler() {
//        boolean bol = true;
//        try {
//            ResultSet rs = DB.getData("SELECT\n"
//                    + "sec_buzmen.id\n"
//                    + "FROM\n"
//                    + "sec_buzmen\n"
//                    + "WHERE\n"
//                    + "sec_buzmen.nic = '" + txtfnic.getText().trim() + "' AND\n"
//                    + "sec_buzmen.contact1 = '" + txtfcontact1.getText().trim() + "' AND\n"
//                    + ""
//                    + "sec_buzmen.buz_man_id = '" + mainsupplierid + "'"
//                    + " AND\n"
//                    + "sec_buzmen.type = 'Supplier'");
//            if (rs.next()) {
//                bol = false;
//
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return bol;
//    }
    private String getPaymentRegid(String grn_id) {
        String id = "0";
        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "payment_reg.id\n"
                    + "FROM\n"
                    + "payment_reg\n"
                    + "WHERE\n"
                    + "payment_reg.section_id = '" + grn_id + "' AND\n"
                    + "payment_reg.`status` = '" + ConstantData.Status_PENDING + "' AND\n"
                    + "payment_reg.type = 'GRN' ");
            if (rs.next()) {
                id = rs.getString(1);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return id;
    }

    private void LoadPayments(String grn_id) {
        try {
//           
            ResultSet rs = DB.getData("SELECT\n"
                    + "payment_reg.total,\n"
                    + "payment_rec.due,\n"
                    + "payment_rec.paid\n"
                    + "FROM\n"
                    + "payment_rec ,\n"
                    + "payment_reg\n"
                    + "WHERE\n"
                    + "payment_rec.payment_reg_id = payment_reg.id AND\n"
                    + "payment_rec.payment_reg_id = '" + getPaymentRegid(grn_id).trim() + "'  ORDER BY\n"
                    + "payment_rec.id DESC");

//            double lastpaidamount = 0.0;
            lblgrandamount.setText("0.0");
            if (rs.next()) {
                lblgrandamount.setText(rs.getString(2));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void firstloadout() {
        txtfDate.setValue(new DateUp().getCurrentDate());
        txtgrnno.grabFocus();

    }

    private void loadPayHistorybyGrnid() {
        try {
            DefaultTableModel tb = (DefaultTableModel) tblpaid.getModel();
            tb.setRowCount(0);

            ResultSet rs = DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "payment_rec.date,\n"
                    + "payment_reg.total,\n"
                    + "payment_rec.paid,\n"
                    + "payment_rec.due\n"
                    + "FROM\n"
                    + "payment_reg ,\n"
                    + "payment_rec ,\n"
                    + "buz_man ,\n"
                    + "grn ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "payment_reg.section_id = '" + grnid.trim() + "' AND\n"
                    + "payment_reg.id = payment_rec.payment_reg_id AND\n"
                    + "payment_reg.section_id = grn.id AND\n"
                    + "payment_rec.payer_id = buz_man.id AND\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Supplier' AND\n"
                    + "payment_reg.`status` = '" + ConstantData.Status_PENDING + "'   ORDER BY\n"
                    + "payment_rec.id DESC");

            while (rs.next()) {

                String grnid = rs.getString(1);
                String grnno = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String date = rs.getString(5);
                String total = rs.getString(6);
                String paid = rs.getString(7);
                String due = rs.getString(8);
                Object arr[] = {grnid, grnno, supplier, date, total, paid, due};

                tb.addRow(arr);
            }

            lblitemcount.setText("" + tblpaid.getRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void clearAllFields() {
        clearSupplierAll();
        clearCashamount();
        clearChequeDetails();
        DefaultTableModel tbl = (DefaultTableModel) tblpaid.getModel();
        tbl.setRowCount(0);
        DefaultTableModel tb = (DefaultTableModel) tblcheque.getModel();
        tb.setRowCount(0);
        lblchequenetamount.setText("0.0");
        txtgrnid.setText("");
        txtgrnno.setText("");
        lblitemcount.setText("0");
        txtfDate.setValue(new DateUp().getCurrentDate());
        cmbpaymethod.setSelectedIndex(0);
        txtgrnno.grabFocus();
    }

    private void loadHistorybyGRNno() {
        try {
            DefaultTableModel tb = (DefaultTableModel) tblpaid.getModel();
            tb.setRowCount(0);

            ResultSet rs = DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "payment_rec.date,\n"
                    + "payment_reg.total,\n"
                    + "payment_rec.paid,\n"
                    + "payment_rec.due,\n"
                    + "buz_man.id\n"
                    + "FROM\n"
                    + "payment_reg ,\n"
                    + "payment_rec ,\n"
                    + "buz_man ,\n"
                    + "grn ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    //  + "payment_reg.section_id = '" + grnid.trim() + "' AND\n"
                    + "payment_reg.id = payment_rec.payment_reg_id AND\n"
                    + "payment_reg.section_id = grn.id AND\n"
                    + "payment_rec.payer_id = buz_man.id AND\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Supplier' AND\n"
                    + "payment_reg.`status` = '" + ConstantData.Status_PENDING + "' and grn.grnno='" + txtgrnno.getText().trim() + "'  ORDER BY\n"
                    + "payment_rec.id DESC");

            String buzid = "0";
            while (rs.next()) {

                String grnid = rs.getString(1);
                txtgrnid.setText(grnid);
                String grnno = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String date = rs.getString(5);
                String total = rs.getString(6);
                String paid = rs.getString(7);
                String due = rs.getString(8);
                buzid = rs.getString(9);

                Object arr[] = {grnid, grnno, supplier, date, total, paid, due};

                tb.addRow(arr);

            }
            setBuzmandetailstoFields(buzid);
            lblitemcount.setText("" + tblpaid.getRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setBuzmandetailstoFields(String buzmanid) {

        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "buz_man.id,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.nic,\n"
                    + "buz_man.contact_1,\n"
                    + "buz_man.company\n"
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "buz_man.`status` in ('1','2') AND\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Supplier' AND\n"
                    + "buz_man.id='" + buzmanid.trim() + "'");
            if (rs.next()) {
                txtsupid.setText(rs.getString(1));
                txtfirstname.setText(rs.getString(2));
                txtlastname.setText(rs.getString(3));
                txtnic.setText(rs.getString(4));
                txtfcontact1.setText(rs.getString(5));
                txtcompany.setText(rs.getString(6));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadSupplierCreditHistory(String buzmanid) {
        try {
            DefaultTableModel tb = (DefaultTableModel) tblpaid.getModel();
            tb.setRowCount(0);

            ResultSet rs = DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "payment_rec.date,\n"
                    + "payment_reg.total,\n"
                    + "payment_rec.paid,\n"
                    + "payment_rec.due,\n"
                    + "buz_man.id\n"
                    + "FROM\n"
                    + "payment_reg ,\n"
                    + "payment_rec ,\n"
                    + "buz_man ,\n"
                    + "grn ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    //  + "payment_reg.section_id = '" + grnid.trim() + "' AND\n"
                    + "payment_reg.id = payment_rec.payment_reg_id AND\n"
                    + "payment_reg.section_id = grn.id AND\n"
                    + "payment_rec.payer_id = buz_man.id AND\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Supplier' AND\n"
                    + "payment_reg.`status` = '" + ConstantData.Status_PENDING + "' and buz_man.id='" + buzmanid.trim() + "'  ORDER BY\n"
                    + "payment_rec.id DESC");

            String buzid = "0";
            while (rs.next()) {

                String grnid = rs.getString(1);

                String grnno = rs.getString(2);
                String supplier = rs.getString(3) + " " + rs.getString(4);
                String date = rs.getString(5);
                String total = rs.getString(6);
                String paid = rs.getString(7);
                String due = rs.getString(8);
                //buzid = rs.getString(9);

                Object arr[] = {grnid, grnno, supplier, date, total, paid, due};

                tb.addRow(arr);

            }
            // setBuzmandetailstoFields(buzid);
            lblitemcount.setText("" + tblpaid.getRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearCardamount() {

        lblpaid.setText("0.0");
        lblbalance.setText("0.0");
        lbldueamount.setText("0.0");
        txtcardamount.setText("0.0");
        txtcardamount.selectAll();

    }

}
