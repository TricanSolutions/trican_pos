/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.ConstantData;
import com.Empty;
import com.Logs;
import com.Messages;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lasitha Ranawaka
 */
public class Businessman extends javax.swing.JDialog {

    /**
     * Creates new form template
     */
    public Businessman(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadtabl();
        loadUserType();
        loadBranch();
        cmbUserType.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBizMen = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbUserType = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbBranch = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtLName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtContact1 = new javax.swing.JFormattedTextField();
        txtContact2 = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtPoBox = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtStreet1 = new javax.swing.JTextField();
        txtStreet2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbCity = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtcompany = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArNote = new javax.swing.JTextArea();
        txtNic = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(153, 153, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Business Man");
        jLabel1.setOpaque(true);

        tblBizMen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "User Type", "Branch", "First Name", "Last Name", "Company", "Nic", "Contact 1", "Contact 2", "PoBox", "Street 1", "Street 2", "City", "Note", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBizMen.getTableHeader().setReorderingAllowed(false);
        tblBizMen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBizMenMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBizMen);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setText("ID");

        txtid.setEditable(false);
        txtid.setEnabled(false);

        jLabel3.setText("User Type*");

        cmbUserType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserTypeActionPerformed(evt);
            }
        });
        cmbUserType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbUserTypeKeyPressed(evt);
            }
        });

        jLabel4.setText("Branch*");

        cmbBranch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbBranchKeyPressed(evt);
            }
        });

        jLabel5.setText("First Name*");

        txtFName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFNameKeyReleased(evt);
            }
        });

        jLabel6.setText("Last Name*");

        txtLName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLNameKeyPressed(evt);
            }
        });

        jLabel7.setText("Company");

        jLabel8.setText("NIC");

        jLabel9.setText("Contact 1*");

        try {
            txtContact1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtContact1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContact1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContact1KeyReleased(evt);
            }
        });

        try {
            txtContact2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtContact2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContact2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContact2KeyReleased(evt);
            }
        });

        jLabel10.setText("Contact 2");

        jLabel11.setText("PoBox");

        txtPoBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPoBoxKeyPressed(evt);
            }
        });

        jLabel12.setText("Street 1");

        txtStreet1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStreet1KeyPressed(evt);
            }
        });

        txtStreet2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStreet2KeyPressed(evt);
            }
        });

        jLabel13.setText("Street 2");

        jLabel14.setText("City*");

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Puttalam", "Colombo", "Dehiwala-Mount Lavinia", "Moratuwa", "Sri Jayawardenapura Kotte", "Negombo", "Kandy", "Kalmunai", "Vavuniya", "Galle", "Trincomalee", "Batticaloa", "Jaffna", "Katunayake", "Dambulla", "Kolonnawa", "Anuradhapura", "Ratnapura", "Badulla", "Matara", "Chavakacheri", "Kattankudy", "Matale", "Kalutara", "Mannar", "Panadura", "Beruwala", "Ja-Ela", "Point Pedro", "Kelaniya", "Peliyagoda", "Kurunegala", "Wattala", "Gampola", "Nuwara Eliya", "Valvettithurai", "Chilaw", "Eravur", "Avissawella", "Weligama", "Ambalangoda", "Ampara", "Kegalle", "Hatton", "Nawalapitiya", "Balangoda", "Hambantota", "Tangalle", "Moneragala", "Gampaha", "Horana", "Wattegama", "Minuwangoda", "Bandarawela", "Kuliyapitiya", "Haputale", "Talawakele", "Harispattuwa", "Kadugannawa", "Embilipitiya" }));
        cmbCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCityKeyPressed(evt);
            }
        });

        jLabel15.setText("Status*");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Active", "Deactive" }));
        cmbStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbStatusKeyPressed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtcompany.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcompanyKeyPressed(evt);
            }
        });

        jLabel16.setText("Note");

        txtArNote.setColumns(20);
        txtArNote.setRows(5);
        txtArNote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtArNoteKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtArNote);

        txtNic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNicKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel2))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(117, 117, 117)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtStreet1)
                                .addGap(109, 109, 109))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(txtcompany, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStreet2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNic, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel14)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContact1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtContact2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFName)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(txtNic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtStreet1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(txtStreet2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtContact1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(txtContact2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(txtPoBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(txtcompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (isThisPerosnAlredyExist() && txtid.getText().isEmpty()) {
            int part = JOptionPane.showConfirmDialog(null, "This " + cmbUserType.getSelectedItem() + " Name - " + txtFName.getText() + " " + txtLName.getText() + " Already Exist Do you want to Save ? ", "Message", 2, 0);

            if (part == JOptionPane.YES_OPTION) {

                submit();

            }
        } else {

            submit();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tblBizMenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBizMenMouseClicked
        if (evt.getClickCount() == 2) {
            block = false;
            int id = (int) tblBizMen.getValueAt(tblBizMen.getSelectedRow(), 0);

            try {
                ResultSet rs = model.DB.getData("SELECT\n"
                        + "buz_man.id,\n"//1
                        + "user_type.type,\n"//2
                        + "branch.`name`,\n"//3
                        + "buz_man.fname,\n"//4
                        + "buz_man.lname,\n"//5
                        + "buz_man.nic,\n"//6
                        + "buz_man.contact_1,\n"//7
                        + "buz_man.contact_2,\n"//8
                        + "buz_man.company,\n"//9
                        + "buz_man.pobox,\n"//10
                        + "buz_man.street_1,\n"//11
                        + "buz_man.street_2,\n"//12
                        + "buz_man.city,\n"//13
                        + "buz_man.note,\n"//14
                        + "buz_man.`status`\n"//15
                        + "FROM\n"
                        + "buz_man ,\n"
                        + "user_type ,\n"
                        + "branch\n"
                        + "WHERE\n"
                        + "buz_man.user_type_id = user_type.id AND\n"
                        + "buz_man.branch_id = branch.id AND\n"
                        + "buz_man.id = '" + id + "'\n"
                        + "ORDER BY\n"
                        + "buz_man.id DESC");

                if (rs.next()) {

                    if (!rs.getString(4).equals("Default")) {
                        txtid.setText("" + id);

                        cmbUserType.setSelectedItem(rs.getString(2));
                        cmbBranch.setSelectedItem(rs.getString(3));
                        txtFName.setText(rs.getString(4));
                        txtLName.setText(rs.getString(5));

                        txtNic.setText(rs.getString(6));
                        txtContact1.setValue(rs.getString(7));
                        txtContact2.setValue(rs.getString(8));

                        txtcompany.setText(rs.getString(9));
                        txtPoBox.setText(rs.getString(10));
                        txtStreet1.setText(rs.getString(11));
                        txtStreet2.setText(rs.getString(12));
                        cmbCity.setSelectedItem(rs.getString(13));
                        txtArNote.setText(rs.getString(14));

                        if (rs.getString(15).equals(ConstantData.Status_ACTIVE)) {
                            cmbStatus.setSelectedItem("Active");

                        } else if (rs.getString(15).equals(ConstantData.Status_DEACTIVE)) {
                            cmbStatus.setSelectedItem("Deactive");

                        }
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            block = true;
        }
    }//GEN-LAST:event_tblBizMenMouseClicked

    private void cmbUserTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbUserTypeKeyPressed
        if (evt.getKeyCode() == 10 && cmbUserType.getSelectedIndex() != 0) {
            cmbBranch.grabFocus();

        }
    }//GEN-LAST:event_cmbUserTypeKeyPressed

    private void cmbBranchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbBranchKeyPressed
        if (evt.getKeyCode() == 10 && cmbBranch.getSelectedIndex() != 0) {
            txtFName.grabFocus();

        }
    }//GEN-LAST:event_cmbBranchKeyPressed

    private void txtFNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFNameKeyPressed
        if (evt.getKeyCode() == 10 && !txtFName.getText().isEmpty()) {
            txtLName.grabFocus();

        }
    }//GEN-LAST:event_txtFNameKeyPressed

    private void txtLNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLNameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtcompany.grabFocus();

        }
    }//GEN-LAST:event_txtLNameKeyPressed

    private void txtContact1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContact1KeyPressed
        if (evt.getKeyCode() == 10 && !txtContact1.getText().isEmpty()) {
            txtContact2.grabFocus();

        }
    }//GEN-LAST:event_txtContact1KeyPressed

    private void txtContact2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContact2KeyPressed
        if (evt.getKeyCode() == 10) {
            txtPoBox.grabFocus();

        }
    }//GEN-LAST:event_txtContact2KeyPressed

    private void txtPoBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPoBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            txtStreet1.grabFocus();

        }
    }//GEN-LAST:event_txtPoBoxKeyPressed

    private void txtStreet1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStreet1KeyPressed
        if (evt.getKeyCode() == 10) {
            txtStreet2.grabFocus();

        }
    }//GEN-LAST:event_txtStreet1KeyPressed

    private void txtStreet2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStreet2KeyPressed
        if (evt.getKeyCode() == 10) {
            cmbCity.grabFocus();

        }
    }//GEN-LAST:event_txtStreet2KeyPressed

    private void cmbCityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCityKeyPressed
        if (evt.getKeyCode() == 10 && cmbCity.getSelectedIndex() != 0) {
            txtArNote.grabFocus();

        }
    }//GEN-LAST:event_cmbCityKeyPressed

    private void cmbStatusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbStatusKeyPressed
        if (evt.getKeyCode() == 10) {
            submit();
            cmbUserType.grabFocus();

        }
    }//GEN-LAST:event_cmbStatusKeyPressed

    private void txtcompanyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcompanyKeyPressed
        if (evt.getKeyCode() == 10) {

            txtNic.grabFocus();

        }
    }//GEN-LAST:event_txtcompanyKeyPressed

    private void txtArNoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtArNoteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {

            cmbStatus.grabFocus();

        }
    }//GEN-LAST:event_txtArNoteKeyPressed

    private void txtContact2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContact2KeyReleased
        if (!Empty.ContactNumberFormatedFeild(txtContact2)) {
            txtContact2.setText("0000000000");
        }
    }//GEN-LAST:event_txtContact2KeyReleased

    private void txtContact1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContact1KeyReleased
        if (!Empty.ContactNumberFormatedFeild(txtContact1)) {
            txtContact1.setText("0000000000");
        }
    }//GEN-LAST:event_txtContact1KeyReleased
    boolean block = true;
    private void cmbUserTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserTypeActionPerformed
        if (block) {
            if (cmbUserType.getSelectedIndex() != 0) {
                loadFromUserType();
            } else {
                loadtabl();
            }
        }
    }//GEN-LAST:event_cmbUserTypeActionPerformed

    private void txtFNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFNameKeyReleased
        if (block) {
            if (!txtFName.getText().isEmpty()) {
                loadFromFirstName();
            } else {
                loadtabl();
            }
        }
    }//GEN-LAST:event_txtFNameKeyReleased

    private void txtNicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNicKeyPressed
        if (evt.getKeyCode() == 10) {

            txtContact1.grabFocus();

        }
    }//GEN-LAST:event_txtNicKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Businessman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Businessman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Businessman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Businessman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Businessman dialog = new Businessman(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbBranch;
    private javax.swing.JComboBox cmbCity;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbUserType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBizMen;
    private javax.swing.JTextArea txtArNote;
    private javax.swing.JFormattedTextField txtContact1;
    private javax.swing.JFormattedTextField txtContact2;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtLName;
    private javax.swing.JTextField txtNic;
    private javax.swing.JTextField txtPoBox;
    private javax.swing.JTextField txtStreet1;
    private javax.swing.JTextField txtStreet2;
    private javax.swing.JTextField txtcompany;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables

    private void clear() {
        txtid.setText("");

        txtContact1.setValue("");
        txtContact2.setValue("");

        txtFName.setText("");
        txtLName.setText("");

        txtNic.setText("");

        txtcompany.setText("");
        txtPoBox.setText("");
        txtStreet1.setText("");
        txtStreet2.setText("");
        txtArNote.setText("");
        cmbBranch.setSelectedIndex(0);
        cmbCity.setSelectedIndex(0);
        cmbStatus.setSelectedIndex(0);
        cmbUserType.setSelectedIndex(0);
    }

    private void loadUserType() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbUserType.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "user_type.id,\n"
                    + "user_type.type\n"
                    + "FROM\n"
                    + "user_type");
            while (rs.next()) {
                if (rs.getString(2).equalsIgnoreCase("Customer") || rs.getString(2).equalsIgnoreCase("Supplier")) {
                    dcbm.addElement(rs.getString(2));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadBranch() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbBranch.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "branch.id,\n"
                    + "branch.`name`,\n"
                    + "branch.`status`\n"
                    + "FROM\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "branch.`status` = '1'");
            while (rs.next()) {

                dcbm.addElement(rs.getString(2));
            }

            if (dcbm.getSize() > 1 && !ConstantData.branchName.isEmpty()) {
                dcbm.setSelectedItem(ConstantData.branchName);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void submit() {
        if (Empty.ComboBox(cmbUserType, "Select User Type !")) {
        } else if (Empty.ComboBox(cmbBranch, "Select Branch !")) {
        } else if (Empty.TxtFieldEmpty(txtFName, "Enter First Name !")) {
        } else if (Empty.TxtFieldEmpty(txtLName, "Enter Last Name !")) {
//        } else if (Empty.TxtFieldEmpty(txtNic, "Enter Nic !")) {
//            txtNic.grabFocus();
        } else if (Empty.ContactNumberFormatedFeild(txtContact1, "Enter Contact 1 !")) {
            txtContact1.grabFocus();
        } else if (Empty.ComboBox(cmbCity, "Select City !")) {
        } else if (Empty.ComboBox(cmbStatus, "Select Status !")) {
        } else {

            //////////////////////////////get user type id START//////////////////////////////////////////
            int userType_id = 0;
            try {
                ResultSet rs = model.DB.getData("SELECT\n"
                        + "user_type.id\n"
                        + "FROM\n"
                        + "user_type\n"
                        + "WHERE\n"
                        + "user_type.type = '" + cmbUserType.getSelectedItem() + "'");

                if (rs.next()) {
                    userType_id = rs.getInt(1);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            /////////////////////////////////////////////get user type id END////////////////////////////////////////

            //////////////////////////////////////////////////////////////get branch id START//////////////////////////
            int branch_id = 0;
            try {
                ResultSet rs = model.DB.getData("SELECT\n"
                        + "branch.id\n"
                        + "FROM\n"
                        + "branch\n"
                        + "WHERE\n"
                        + "branch.`name` = '" + cmbBranch.getSelectedItem() + "'");

                if (rs.next()) {
                    branch_id = rs.getInt(1);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            /////////////////////////////////get branch id END///////////////////////////////////////

            String fname = txtFName.getText().trim();
            String lname = txtLName.getText().trim();
            String company = txtcompany.getText().trim();
            String nic = txtNic.getText().trim();
            String con1 = txtContact1.getText().trim();
            String con2 = txtContact2.getText().trim();
            String pbox = txtPoBox.getText().trim();
            String street1 = txtStreet1.getText().trim();
            String street2 = txtStreet2.getText().trim();
            String note = txtArNote.getText().trim();
            Object city = cmbCity.getSelectedItem();

            if (txtid.getText().isEmpty()) {
                //save
                int max_id = Integer.parseInt(GetID());
                try {
                    model.DB.putData("INSERT INTO buz_man(id,user_type_id,branch_id,fname,lname,nic,contact_1,contact_2,company,pobox,street_1,street_2,"
                            + "city,note,status)values('" + max_id + "','" + userType_id + "','" + branch_id + "','" + fname + "','" + lname + "','" + nic + "','" + con1 + "',"
                            + "'" + con2 + "','" + company + "','" + pbox + "','" + street1 + "','" + street2 + "','" + city + "','" + note + "','" + ConstantData.getStatusID(cmbStatus) + "')");

                    Messages.normaljoption("Data saved!");

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                //update

                try {
                    model.DB.putData("UPDATE buz_man SET user_type_id='" + userType_id + "',branch_id='" + branch_id + "',fname='" + fname + "',lname='" + lname + "',"
                            + "company='" + company + "',nic='" + nic + "',contact_1='" + con1 + "',contact_2='" + con2 + "',pobox='" + pbox + "',street_1='" + street1 + "',"
                            + "street_2='" + street2 + "',city='" + city + "',note='" + note + "',status='" + ConstantData.getStatusID(cmbStatus) + "' WHERE id='" + txtid.getText() + "'");
                    Messages.normaljoption("Data Updated!");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            clear();
            loadtabl();
            cmbUserType.grabFocus();
        }
        new Logs().createLog("Bussinesman reg", ConstantData.logUserId);
    }

    private String GetID() { // return next new id
        String id = "1";
        try {
            ResultSet rs = model.DB.getData("select max(id) from buz_man");

            if (rs.next()) {

                if (rs.getString(1) != null) {
                    int num = Integer.parseInt(rs.getString(1));
                    num++;
                    id = "" + num;
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return id;
    }

    private void loadtabl() {
        DefaultTableModel dtm = (DefaultTableModel) tblBizMen.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "buz_man.id,\n"//1
                    + "user_type.type,\n"//2
                    + "branch.`name`,\n"//3
                    + "buz_man.fname,\n"//4
                    + "buz_man.lname,\n"//5
                    + "buz_man.nic,\n"//6
                    + "buz_man.contact_1,\n"//7
                    + "buz_man.contact_2,\n"//8
                    + "buz_man.company,\n"//9
                    + "buz_man.pobox,\n"//10
                    + "buz_man.street_1,\n"//11
                    + "buz_man.street_2,\n"//12
                    + "buz_man.city,\n"//13
                    + "buz_man.note,\n"//14
                    + "buz_man.`status`\n"//15
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "buz_man.branch_id = branch.id\n and buz_man.id<>'1'"
                    + "ORDER BY\n"
                    + "buz_man.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String user = rs.getString(2);
                String branch = rs.getString(3);
                String fname = rs.getString(4);
                String lname = rs.getString(5);

                String nic = rs.getString(6);
                String con1 = rs.getString(7);
                String con2 = rs.getString(8);
                String company = rs.getString(9);
                String pbox = rs.getString(10);
                String street1 = rs.getString(11);
                String street2 = rs.getString(12);
                String city = rs.getString(13);
                String note = rs.getString(14);

                String status;
                if (rs.getString(15).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, user, branch, fname, lname, company, nic, con1, con2, pbox, street1, street2, city, note, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadFromUserType() {
        DefaultTableModel dtm = (DefaultTableModel) tblBizMen.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "buz_man.id,\n"//1
                    + "user_type.type,\n"//2
                    + "branch.`name`,\n"//3
                    + "buz_man.fname,\n"//4
                    + "buz_man.lname,\n"//5
                    + "buz_man.nic,\n"//6
                    + "buz_man.contact_1,\n"//7
                    + "buz_man.contact_2,\n"//8
                    + "buz_man.company,\n"//9
                    + "buz_man.pobox,\n"//10
                    + "buz_man.street_1,\n"//11
                    + "buz_man.street_2,\n"//12
                    + "buz_man.city,\n"//13
                    + "buz_man.note,\n"//14
                    + "buz_man.`status`\n"//15
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "buz_man.branch_id = branch.id\n and buz_man.id<>'1' and user_type.type='" + cmbUserType.getSelectedItem() + "'"
                    + "ORDER BY\n"
                    + "buz_man.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String user = rs.getString(2);
                String branch = rs.getString(3);
                String fname = rs.getString(4);
                String lname = rs.getString(5);

                String nic = rs.getString(6);
                String con1 = rs.getString(7);
                String con2 = rs.getString(8);
                String company = rs.getString(9);
                String pbox = rs.getString(10);
                String street1 = rs.getString(11);
                String street2 = rs.getString(12);
                String city = rs.getString(13);
                String note = rs.getString(14);

                String status;
                if (rs.getString(15).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, user, branch, fname, lname, company, nic, con1, con2, pbox, street1, street2, city, note, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadFromFirstName() {
        DefaultTableModel dtm = (DefaultTableModel) tblBizMen.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "buz_man.id,\n"//1
                    + "user_type.type,\n"//2
                    + "branch.`name`,\n"//3
                    + "buz_man.fname,\n"//4
                    + "buz_man.lname,\n"//5
                    + "buz_man.nic,\n"//6
                    + "buz_man.contact_1,\n"//7
                    + "buz_man.contact_2,\n"//8
                    + "buz_man.company,\n"//9
                    + "buz_man.pobox,\n"//10
                    + "buz_man.street_1,\n"//11
                    + "buz_man.street_2,\n"//12
                    + "buz_man.city,\n"//13
                    + "buz_man.note,\n"//14
                    + "buz_man.`status`\n"//15
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "buz_man.branch_id = branch.id\n and buz_man.id<>'1' and  buz_man.fname like  '%" + txtFName.getText().trim() + "%' "
                    + "ORDER BY\n"
                    + "buz_man.id DESC");

            while (rs.next()) {
                int id = rs.getInt(1);
                String user = rs.getString(2);
                String branch = rs.getString(3);
                String fname = rs.getString(4);
                String lname = rs.getString(5);

                String nic = rs.getString(6);
                String con1 = rs.getString(7);
                String con2 = rs.getString(8);
                String company = rs.getString(9);
                String pbox = rs.getString(10);
                String street1 = rs.getString(11);
                String street2 = rs.getString(12);
                String city = rs.getString(13);
                String note = rs.getString(14);

                String status;
                if (rs.getString(15).equals(ConstantData.Status_ACTIVE)) {
                    status = "Active";

                } else {

                    status = "Deactive";
                }

                Object arr[] = {id, user, branch, fname, lname, company, nic, con1, con2, pbox, street1, street2, city, note, status};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private boolean isThisPerosnAlredyExist() {
        boolean bol = false;
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "buz_man.id\n"
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = '"+cmbUserType.getSelectedItem()+"' AND\n"
                    + "buz_man.fname = '"+txtFName.getText().trim()+"' AND\n"
                    + "buz_man.lname = '"+txtLName.getText().trim()+"'");

            if (rs.next()) {

                bol = true;

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return bol;

    }
}
