/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import model.DB;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class Purchase_Order extends javax.swing.JDialog {

    /**
     * Creates new form Purchase_Order
     */
    public Purchase_Order(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        firstLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtitemname = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cmbbranch = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblitemcount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Purchase Order Report");
        jLabel1.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Item Quick Search"));

        jLabel4.setText("Item Name");

        txtitemname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtitemnameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtitemnameKeyReleased(evt);
            }
        });

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("Branch");

        cmbbranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbranchActionPerformed(evt);
            }
        });
        cmbbranch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbbranchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(txtitemname, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbbranch, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtitemname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(cmbbranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Category", "Sub Category", "Name", "Serial Type", "Available Qty", "Re-Order Qty Level", "Branch Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl);
        if (tbl.getColumnModel().getColumnCount() > 0) {
            tbl.getColumnModel().getColumn(0).setPreferredWidth(0);
        }

        jLabel3.setText("Item Count");

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblitemcount.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 963, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(28, 28, 28)
                                .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblitemcount))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtitemnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnameKeyPressed

    }//GEN-LAST:event_txtitemnameKeyPressed

    private void txtitemnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnameKeyReleased
        if (!txtitemname.getText().isEmpty()) {
            loadByItemname();
        } else {
            
            clearAll();
            
        }
        
        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_txtitemnameKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        clearAll();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked

    }//GEN-LAST:event_tblMouseClicked

    private void cmbbranchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbbranchKeyPressed
//        if (evt.getKeyCode() == 10) {
//            txtcostprice.grabFocus();
//        }
    }//GEN-LAST:event_cmbbranchKeyPressed

    private void cmbbranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbranchActionPerformed
        txtitemname.setText("");
        if (cmbbranch.getSelectedIndex() != 0) {
            loadByBranch();
        } else {
            clearAll();
        }
    }//GEN-LAST:event_cmbbranchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Purchase_Order dialog = new Purchase_Order(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbbranch;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtitemname;
    // End of variables declaration//GEN-END:variables

    private void firstLoad() {
        LoadItemstoTxt();
        loadReorderTable();
        loadBranches();
    }
    
    private void clearAll() {
        
        txtitemname.setText("");
        cmbbranch.setSelectedIndex(0);
        loadReorderTable();
    }
    
    private void loadBranches() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbbranch.getModel();
        dcbm.removeAllElements();
        
        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "branch.id,\n"
                    + "branch.`name`,\n"
                    + "branch.`status`\n"
                    + "FROM\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "branch.`status` = '1'");
            while (rs.next()) {
                
                dcbm.addElement(rs.getString(2));
            }

//            if (dcbm.getSize() > 1 && !ConstantData.branchName.isEmpty()) {
//                dcbm.setSelectedItem(ConstantData.branchName);
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void LoadItemstoTxt() {
        ArrayList<String> li = new ArrayList<String>();

        //  TextAutoCompleter tx = new TextAutoCompleter(txtitemname);
        try {
            
            ResultSet rs = DB.getData("SELECT\n"
                    + "item.`name`\n"
                    + "FROM\n"
                    + "item\n"
                    + "WHERE\n"
                    + "item.`status` in ('1','2') ");
            while (rs.next()) {
                li.add(rs.getString(1));
                //tx.addItem(rs.getString(1));

            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        AutoCompleteDecorator.decorate(txtitemname, li, true);
    }
    
    private void loadReorderTable() {
        
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "serialize.type,\n"
                    + "Sum(stock.qty),\n"
                    + "item.reorderqty,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "category ,\n"
                    + "item ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "stock ,\n"
                    + "sub_category ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.category_id = category.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "batch.id = serial_details.batch_id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = branch.id\n"
                    + "GROUP BY\n"
                    + "batch.item_id,\n"
                    + "stock.branch_id\n"
                    + "HAVING Sum(stock.qty) <=item.reorderqty");
            
            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String serialtype = rs.getString(5);
                double avqty = rs.getDouble(6);
                double reqty = rs.getDouble(7);
                String branch = rs.getString(8);
                
                Object arr[] = {id, category, subcate, name, serialtype, avqty, reqty, branch};
                dtm.addRow(arr);
            }
            lblitemcount.setText("" + tbl.getRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void loadByItemname() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "serialize.type,\n"
                    + "Sum(stock.qty),\n"
                    + "item.reorderqty,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "category ,\n"
                    + "item ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "stock ,\n"
                    + "sub_category ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.category_id = category.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "batch.id = serial_details.batch_id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = branch.id and item.`name`='" + txtitemname.getText().trim() + "' \n"
                    + "GROUP BY\n"
                    + "batch.item_id,\n"
                    + "stock.branch_id\n"
                    + "HAVING Sum(stock.qty) <=item.reorderqty");
            
            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String serialtype = rs.getString(5);
                double avqty = rs.getDouble(6);
                double reqty = rs.getDouble(7);
                String branch = rs.getString(8);
                
                Object arr[] = {id, category, subcate, name, serialtype, avqty, reqty, branch};
                dtm.addRow(arr);
            }
            lblitemcount.setText("" + tbl.getRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void loadByBranch() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "batch.item_id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "serialize.type,\n"
                    + "Sum(stock.qty),\n"
                    + "item.reorderqty,\n"
                    + "branch.`name`\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "category ,\n"
                    + "item ,\n"
                    + "serialize ,\n"
                    + "serial_details ,\n"
                    + "stock ,\n"
                    + "sub_category ,\n"
                    + "branch\n"
                    + "WHERE\n"
                    + "batch.item_id = item.id AND\n"
                    + "item.category_id = category.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "batch.id = serial_details.batch_id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = branch.id  \n"
                    + "GROUP BY\n"
                    + "batch.item_id,\n"
                    + "stock.branch_id\n"
                    + "HAVING Sum(stock.qty) <=item.reorderqty");
            
            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String serialtype = rs.getString(5);
                double avqty = rs.getDouble(6);
                double reqty = rs.getDouble(7);
                String branch = rs.getString(8);
                
                if (branch.equals(cmbbranch.getSelectedItem()) && txtitemname.getText().isEmpty()) {
                    Object arr[] = {id, category, subcate, name, serialtype, avqty, reqty, branch};
                    dtm.addRow(arr);
                }
                
            }
            lblitemcount.setText("" + tbl.getRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
}
