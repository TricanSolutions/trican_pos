/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.ConstantData;
import com.Empty;
import com.Logs;
import com.Messages;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import model.DB;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class ViewGrn extends javax.swing.JDialog {

    /**
     * Creates new form viewgrn
     */
    public ViewGrn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        firstLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnprev = new javax.swing.JButton();
        btnnext = new javax.swing.JButton();
        txtgrnid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtgrnno = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtsuppliername = new javax.swing.JTextField();
        btnsearch = new javax.swing.JButton();
        btnclear = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtffromdate = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtftodate = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        cmbsearchmethod = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblgrnview = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        lblitemcount = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GRN View");
        jLabel1.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnprev.setText("<");
        btnprev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprevActionPerformed(evt);
            }
        });

        btnnext.setText(">");
        btnnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnextActionPerformed(evt);
            }
        });

        txtgrnid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtgrnid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgrnidKeyPressed(evt);
            }
        });

        jLabel2.setText("GRN ID");

        jLabel3.setText("GRN No");

        txtgrnno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgrnnoActionPerformed(evt);
            }
        });
        txtgrnno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgrnnoKeyPressed(evt);
            }
        });

        jLabel4.setText("Supplier First Name");

        txtsuppliername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsuppliernameActionPerformed(evt);
            }
        });
        txtsuppliername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtsuppliernameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsuppliernameKeyReleased(evt);
            }
        });

        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        btnclear.setText("Clear");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        jLabel6.setText("From");

        try {
            txtffromdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtffromdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtffromdateKeyPressed(evt);
            }
        });

        jLabel7.setText("To");

        try {
            txtftodate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtftodate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtftodateKeyPressed(evt);
            }
        });

        jLabel9.setText("Search Method");

        cmbsearchmethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "GRN No", "Supplier Name", "Supplier Name+Date", "One Date", "More Date" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtsuppliername, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(63, 63, 63)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(btnprev)
                            .addGap(4, 4, 4)
                            .addComponent(txtgrnid, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnnext))))
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(259, 259, 259)
                                .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtffromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(109, 109, 109)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(txtftodate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7))))
                        .addGap(52, 52, 52))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbsearchmethod, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtgrnno, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbsearchmethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(txtgrnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtftodate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnprev)
                            .addComponent(btnnext)
                            .addComponent(txtgrnid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtsuppliername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(txtffromdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tblgrnview.setBackground(new java.awt.Color(255, 255, 204));
        tblgrnview.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tblgrnview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "GRN No", "Date", "Supplier Name", "Contact No1", "Discount Option", "Total Discount", "Grand Total", "Due Amount Rs.", "Payment Status", "Log User", "Store Keeper", "Branch Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblgrnview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblgrnview.getTableHeader().setReorderingAllowed(false);
        tblgrnview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblgrnviewMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblgrnview);
        if (tblgrnview.getColumnModel().getColumnCount() > 0) {
            tblgrnview.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        jLabel8.setText("Items");

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblitemcount.setText("0");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("All Pendings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblitemcount)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnextActionPerformed
        if (!txtgrnid.getText().isEmpty()) {
            int num = Integer.parseInt(txtgrnid.getText());
            num++;
            if (Integer.parseInt(GetMaxID("id", "grn")) >= num) {
                LoadGRNID(String.valueOf(num));

            }
        }
        lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
    }//GEN-LAST:event_btnnextActionPerformed

    private void btnprevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprevActionPerformed
        if (!txtgrnid.getText().isEmpty()) {
            int num = Integer.parseInt(txtgrnid.getText());
            num--;
            if (num >= 1) {
                LoadGRNID(String.valueOf(num));
            }
        }
        lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
    }//GEN-LAST:event_btnprevActionPerformed

    private void txtgrnidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgrnidKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!txtgrnid.getText().isEmpty()) {
                int num = Integer.parseInt(txtgrnid.getText());
                LoadGRNID(String.valueOf(num));

                if (num < 1 || Integer.parseInt(GetMaxID("id", "grn")) < num) {
                    LoadGRNID(GetMaxID("id", "grn"));
                }

            } else {
                LoadGRNID(GetMaxID("id", "grn"));
            }

        }

        lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
    }//GEN-LAST:event_txtgrnidKeyPressed

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        clearAll();


    }//GEN-LAST:event_btnclearActionPerformed

    private void txtsuppliernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsuppliernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsuppliernameActionPerformed

    private void txtsuppliernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsuppliernameKeyReleased

    }//GEN-LAST:event_txtsuppliernameKeyReleased

    private void txtffromdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtffromdateKeyPressed
        if (evt.getKeyCode() == 10) {
            txtftodate.grabFocus();
        }
    }//GEN-LAST:event_txtffromdateKeyPressed

    private void txtftodateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtftodateKeyPressed
        if (evt.getKeyCode() == 10) {
            btnsearch.grabFocus();
        }
    }//GEN-LAST:event_txtftodateKeyPressed

    private void txtgrnnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgrnnoKeyPressed
        if (evt.getKeyCode() == 10) {
            txtsuppliername.grabFocus();
        }
    }//GEN-LAST:event_txtgrnnoKeyPressed

    private void txtsuppliernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsuppliernameKeyPressed
        if (evt.getKeyCode() == 10) {
            txtffromdate.grabFocus();
        }
    }//GEN-LAST:event_txtsuppliernameKeyPressed

    private void tblgrnviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblgrnviewMouseClicked
        if (tblgrnview.getRowCount() != 0) {
            if (evt.getClickCount() == 2) {
                new ViewGrnDetails(ConstantData.home, false, tblgrnview.getValueAt(tblgrnview.getSelectedRow(), 0).toString(),this).setVisible(true);
                //   new ViewGrnDetails(ConstantData.home, false).setVisible(true);

            }
        }
    }//GEN-LAST:event_tblgrnviewMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearAllPending();
        ListAllPendings();
         new Logs().createLog("GRN All Pending", ConstantData.logUserId);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        if (cmbsearchmethod.getSelectedIndex() != 0) {

            if (cmbsearchmethod.getSelectedIndex() == 1) { //grn no
                SearchforGRNno();
            } else if (cmbsearchmethod.getSelectedIndex() == 2) { // supplier
                SearchforSupplier();
            } else if (cmbsearchmethod.getSelectedIndex() == 3) {// suplier dates
                SearchforSupplierwithDaterange();
            } else if (cmbsearchmethod.getSelectedIndex() == 4) {// one date
                Searchforfromdate();
            } else if (cmbsearchmethod.getSelectedIndex() == 5) {// more date
                SearchforDaterange();
            }

        } else {
            clearAll();
        }
 new Logs().createLog("View GRN Search", ConstantData.logUserId);

    }//GEN-LAST:event_btnsearchActionPerformed

    private void txtgrnnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgrnnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgrnnoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewGrn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewGrn dialog = new ViewGrn(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btnnext;
    private javax.swing.JButton btnprev;
    private javax.swing.JButton btnsearch;
    private javax.swing.JComboBox cmbsearchmethod;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JTable tblgrnview;
    private javax.swing.JFormattedTextField txtffromdate;
    private javax.swing.JFormattedTextField txtftodate;
    private javax.swing.JTextField txtgrnid;
    private javax.swing.JTextField txtgrnno;
    private javax.swing.JTextField txtsuppliername;
    // End of variables declaration//GEN-END:variables

    private void firstLoad() {

        LoadSuppliertoTxt();
        LoadGRNID(GetMaxID("id", "grn"));
        cmbsearchmethod.grabFocus();
    }

    private void LoadGRNID(String grnid) {
        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "grn.id = '" + grnid.trim() + "'\n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            if (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText(grnid);
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String GetMaxID(String column, String table) { // return next new id
        String id = "1";
        try {
            ResultSet rs = model.DB.getData("select max(" + column.trim() + ") from " + table.trim());

            if (rs.next()) {

                if (rs.getString(1) != null) {

                    id = rs.getString(1);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return id;
    }

    private void LoadSuppliertoTxt() {

        List<String> li = new ArrayList<String>();

        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "buz_man.fname\n"
                    + ""
                    + "FROM\n"
                    + "buz_man ,\n"
                    + "user_type\n"
                    + "WHERE\n"
                    + "buz_man.user_type_id = user_type.id AND\n"
                    + "user_type.type = 'Supplier' \n"
                    + "");
            while (rs.next()) {
                li.add(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        AutoCompleteDecorator.decorate(txtsuppliername, li, true);
    }

    public void clearAll() {
        txtgrnno.setText("");
//        txtsupid.setText("");
        txtsuppliername.setText("");
//        txtserialno.setText("");
        txtffromdate.setValue("");
        txtftodate.setValue("");
        cmbsearchmethod.setSelectedIndex(0);
        LoadGRNID(GetMaxID("id", "grn"));
    }

    private void SearchforGRNno() {
        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "grn.grnno = '" + txtgrnno.getText().trim() + "'\n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText("");
//            txtsupid.setText("");
            txtsuppliername.setText("");
//            txtfSupContact.setValue("");
            txtffromdate.setValue("");
            txtftodate.setValue("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SearchforSupplier() {
        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "buz_man.fname = '" + txtsuppliername.getText().trim() + "'\n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText("");
            txtgrnno.setText("");
            txtffromdate.setValue("");
            txtftodate.setValue("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void SearchforSupplierwithDaterange() {
        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "buz_man.fname = '" + txtsuppliername.getText().trim() + "'\n"
                    + "and grn.date between '" + txtffromdate.getText().concat(" 00:00:00.0") + "' and  '" + txtftodate.getText().concat(" 00:00:00.0") + "' \n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText("");
            txtgrnno.setText("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SearchforSupplierwithfromdateonly() {
        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "buz_man.fname = '" + txtsuppliername.getText().trim() + "'\n"
                    + "and grn.date like '" + txtffromdate.getText() + "%' \n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText("");
            txtgrnno.setText("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SearchforDaterange() {
        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "\n"
                    + " grn.date between '" + txtffromdate.getText().concat(" 00:00:00.0") + "' and  '" + txtftodate.getText().concat(" 00:00:00.0") + "' \n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText("");
            txtgrnno.setText("");
//            txtsupid.setText("");
            txtsuppliername.setText("");
//            txtfSupContact.setValue("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Searchforfromdate() {

        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + " grn.date like '" + txtffromdate.getText() + "%' \n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnid.setText("");
            txtgrnno.setText("");
//            txtsupid.setText("");
            txtsuppliername.setText("");
//            txtfSupContact.setValue("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ListAllPendings() {

        DefaultTableModel tbl = (DefaultTableModel) tblgrnview.getModel();
        tbl.setRowCount(0);

        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "grn.id,\n"
                    + "grn.grnno,\n"
                    + "grn.date,\n"
                    + "buz_man.fname,\n"
                    + "buz_man.lname,\n"
                    + "buz_man.contact_1,\n"
                    + "grn.discount_opt,\n"
                    + "grn.discount,\n"
                    + "grn.grand_tot,\n"
                    + "payment_rec.due,\n"
                    + "payment_reg.`status`,\n"
                    + "`user`.fname,\n"
                    + "`user`.lname,\n"
                    + "grn.holder_id,\n"
                    + "branch.`name`,\n"
                    + "payment_rec.payment_reg_id\n"
                    + "FROM\n"
                    + "grn ,\n"
                    + "buz_man ,\n"
                    + "payment_reg ,\n"
                    + "`user` ,\n"
                    + "branch ,\n"
                    + "payment_rec\n"
                    + "WHERE\n"
                    + "grn.buz_man_id = buz_man.id AND\n"
                    + "grn.`status` = '1' AND\n"
                    + "grn.id = payment_reg.section_id AND\n"
                    + "payment_reg.type = 'GRN' AND\n"
                    + "grn.user_id = `user`.id AND\n"
                    + "grn.branch_id = branch.id AND\n"
                    + "payment_rec.id = (select max(payment_rec.id) from payment_rec where payment_reg.id=payment_rec.payment_reg_id ORDER BY payment_rec.id DESC ) AND\n"
                    + "payment_reg.status='" + ConstantData.Status_PENDING + "'  \n"
                    + "ORDER BY\n"
                    + "grn.id DESC");

            while (rs.next()) {

                String id = rs.getString(1);
                String grnno = rs.getString(2);
                String date = rs.getString(3);
                String supplier = rs.getString(4) + " " + rs.getString(5);
                String supcontact = rs.getString(6);
                String discoption = rs.getString(7);
//                if (rs.getString(7).equals("0")) {
//                    discoption = "%";
//                } else if (rs.getString(7).equals("1")) {
//                    discoption = "Price";
//                }
                String discount = rs.getString(8);
                String total = rs.getString(9);
                String dueamount = rs.getString(10);

                String status = "";
                if (rs.getString(11).equals(ConstantData.Status_PENDING)) {
                    status = "Pending";
                } else if (rs.getString(11).equals(ConstantData.Status_COMPLETE)) {
                    status = "Completed";
                }
                String loguser = rs.getString(12) + " " + rs.getString(13);
                String storekeeper = getUsername(rs.getString(14));
                String brnch = rs.getString(15);

                Object arr[] = {id, grnno, date, supplier, supcontact, discoption, discount, total, dueamount, status, loguser, storekeeper, brnch};
                tbl.addRow(arr);
            }

            txtgrnno.setText("");
//            txtsupid.setText("");
            txtsuppliername.setText("");
//            txtfSupContact.setValue("");
            txtffromdate.setValue("");
            txtftodate.setValue("");
            lblitemcount.setText(String.valueOf(tblgrnview.getRowCount()));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private String getUsername(String id) {
        String name = "";
        try {

            ResultSet rs = DB.getData("SELECT\n"
                    + "`user`.fname,\n"
                    + "`user`.lname\n"
                    + "FROM\n"
                    + "`user`\n"
                    + "WHERE\n"
                    + "`user`.id = '" + id.trim() + "'");
            if (rs.next()) {
                name = rs.getString(1) + " " + rs.getString(2);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return name;
    }

    private void clearAllPending() {
        txtgrnno.setText("");
        txtsuppliername.setText("");
        txtgrnid.setText("");
        txtffromdate.setValue("");
        txtftodate.setValue("");
        cmbsearchmethod.setSelectedIndex(0);
    }

}
