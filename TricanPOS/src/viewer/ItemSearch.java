/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.ConstantData;
import com.DBQueryEngine;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sudaraka Ranasinghe
 */
public class ItemSearch extends javax.swing.JDialog {

    Invoice invo;
    TransferNote tranno;
    Grn grn;

    public ItemSearch(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        firstload();
    }

    public ItemSearch(java.awt.Frame parent, boolean modal, Invoice invoice) {
        super(parent, modal);
        initComponents();
        this.invo = invoice;
        firstload();
    }

    public ItemSearch(java.awt.Frame parent, boolean modal, TransferNote tranno) {
        super(parent, modal);
        initComponents();
        this.tranno = tranno;
        firstload();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtitemnname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        cmbsubcategory = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblitemcount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Item Search"));

        jLabel4.setText("Item Name");

        txtitemnname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtitemnnameKeyReleased(evt);
            }
        });

        jLabel5.setText("Category");

        jLabel6.setText("Sub Category");

        cmbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryActionPerformed(evt);
            }
        });
        cmbCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCategoryKeyPressed(evt);
            }
        });

        cmbsubcategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbsubcategoryActionPerformed(evt);
            }
        });
        cmbsubcategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbsubcategoryKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtitemnname, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbsubcategory, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbsubcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtitemnname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Category", "Sub Category", "Name", "Batch No", "Barcode", "Serial Type", "Serial No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl);
        if (tbl.getColumnModel().getColumnCount() > 0) {
            tbl.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        jLabel3.setText("Item Count");

        lblitemcount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblitemcount.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(lblitemcount, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblitemcount))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryActionPerformed

        if (cmbCategory.getSelectedIndex() != 0) {
            loadSubCategoryCombo(cmbCategory.getSelectedItem().toString());
            loadCategorystoTable();
        } else {
            cmbsubcategory.removeAllItems();
            txtitemnname.setText("");
            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
            dtm.setRowCount(0);

        }

        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_cmbCategoryActionPerformed

    private void cmbCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCategoryKeyPressed
        if (cmbCategory.getSelectedIndex() != 0) {

            if (evt.getKeyCode() == 10) {
                cmbsubcategory.grabFocus();
            }

        }
    }//GEN-LAST:event_cmbCategoryKeyPressed

    private void cmbsubcategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbsubcategoryActionPerformed

        if (cmbCategory.getSelectedIndex() != 0) {

            loadSubCategorystoTable();
        } else {
            txtitemnname.setText("");
            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
            dtm.setRowCount(0);

        }

        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_cmbsubcategoryActionPerformed

    private void cmbsubcategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbsubcategoryKeyPressed

    }//GEN-LAST:event_cmbsubcategoryKeyPressed

    private void txtitemnnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtitemnnameKeyReleased
        if (!txtitemnname.getText().isEmpty()) {
            loadByItemname();
        } else {

            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
            dtm.setRowCount(0);
            cmbCategory.setSelectedIndex(0);
            cmbsubcategory.removeAllItems();

        }

        lblitemcount.setText("" + tbl.getRowCount());
    }//GEN-LAST:event_txtitemnnameKeyReleased

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        if (evt.getClickCount() == 2) {
            if (tbl.getRowCount() != 0) {
                try {

                    if (invo != null) {
                        invo.txtitemid.setText(tbl.getValueAt(tbl.getSelectedRow(), 0).toString());
                        invo.txtitemname.setText(tbl.getValueAt(tbl.getSelectedRow(), 3).toString());
                        invo.txtbarcode.setText(tbl.getValueAt(tbl.getSelectedRow(), 5).toString());
                        invo.txtserialno.setText(tbl.getValueAt(tbl.getSelectedRow(), 7).toString());

                        invo.txtbarcode.grabFocus();

                        this.dispose();
                        invo = null;

                    } else if (tranno != null) {
                        tranno.txtitemid.setText(tbl.getValueAt(tbl.getSelectedRow(), 0).toString());
                        tranno.txtitemname.setText(tbl.getValueAt(tbl.getSelectedRow(), 3).toString());
                        tranno.txtbarcode.setText(tbl.getValueAt(tbl.getSelectedRow(), 5).toString());
                        tranno.txtserialno.setText(tbl.getValueAt(tbl.getSelectedRow(), 7).toString());

                        tranno.txtbarcode.grabFocus();

                        this.dispose();
                        tranno = null;
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }
    }//GEN-LAST:event_tblMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

        this.dispose();
        invo = null;
        tranno = null;
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ItemSearch dialog = new ItemSearch(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbsubcategory;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblitemcount;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtitemnname;
    // End of variables declaration//GEN-END:variables

    private void loadSubCategoryCombo(String category) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbsubcategory.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "sub_category.sub_category\n"
                    + "FROM\n"
                    + "category ,\n"
                    + "sub_category\n"
                    + "WHERE\n"
                    + "sub_category.`status` = '" + ConstantData.Status_ACTIVE + "' AND\n"
                    + "sub_category.category_id = category.id AND\n"
                    + "category.category = '" + category + "'");
            while (rs.next()) {

                dcbm.addElement(rs.getString(1));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void firstload() {

        DBQueryEngine.loadSelectedComboItems(cmbCategory, "SELECT\n"
                + "category.category\n"
                + "FROM\n"
                + "category\n"
                + "WHERE\n"
                + "category.`status` = '" + ConstantData.Status_ACTIVE + "'");

        cmbCategory.grabFocus();
    }

    private void loadCategorystoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "item.id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "serial_details ,\n"
                    + "category ,\n"
                    + "serialize,"
                    + "stock\n"
                    + "WHERE\n"
                    + "item.category_id = category.id AND\n"
                    + "category.category = '" + cmbCategory.getSelectedItem() + "' AND\n"
                    + "item.id = batch.item_id AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId + "' AND\n"
                    + "stock.qty > 0");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);

                Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadSubCategorystoTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "item.id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "serial_details ,\n"
                    + "category ,\n"
                    + "serialize,"
                    + "stock\n"
                    + "WHERE\n"
                    + "item.category_id = category.id AND\n"
                    + "category.category = '" + cmbCategory.getSelectedItem() + "' AND sub_category.sub_category='" + cmbsubcategory.getSelectedItem() + "'   and\n"
                    + "item.id = batch.item_id AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "serial_details.serialize_id = serialize.id AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId + "' AND\n"
                    + "stock.qty > 0");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);

                Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearAll() {

        DBQueryEngine.loadSelectedComboItems(cmbCategory, "SELECT\n"
                + "category.category\n"
                + "FROM\n"
                + "category\n"
                + "WHERE\n"
                + "category.`status` = '" + ConstantData.Status_ACTIVE + "'");

        cmbsubcategory.removeAllItems();
        txtitemnname.setText("");
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);

    }

    private void loadByItemname() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.DB.getData("SELECT\n"
                    + "item.id,\n"
                    + "category.category,\n"
                    + "sub_category.sub_category,\n"
                    + "item.`name`,\n"
                    + "batch.id,\n"
                    + "batch.barcode,\n"
                    + "serialize.type,\n"
                    + "serial_details.serialno\n"
                    + "FROM\n"
                    + "batch ,\n"
                    + "item ,\n"
                    + "sub_category ,\n"
                    + "serial_details ,\n"
                    + "category ,\n"
                    + "serialize,"
                    + "stock\n"
                    + "WHERE\n"
                    + "item.category_id = category.id AND\n"
                    + "item.name like '" + txtitemnname.getText().trim() + "%'  and\n"
                    + "item.id = batch.item_id AND\n"
                    + "serial_details.batch_id = batch.id AND\n"
                    + "item.sub_category_id = sub_category.id AND\n"
                    + "serial_details.serialize_id = serialize.id  AND\n"
                    + "serial_details.id = stock.serial_details_id AND\n"
                    + "stock.branch_id = '" + ConstantData.branchId + "' AND\n"
                    + "stock.qty > 0");

            while (rs.next()) {
                int id = rs.getInt(1);
                String category = rs.getString(2);
                String subcate = rs.getString(3);
                String name = rs.getString(4);
                String batch = rs.getString(5);
                String barcode = rs.getString(6);
                String serialtype = rs.getString(7);
                String serial = rs.getString(8);

                Object arr[] = {id, category, subcate, name, batch, barcode, serialtype, serial};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
